help(log)
9/25*log(9/25,2) + 12/25*log(12/25*3,2) + 4/25*log(4/25*3,2)
9/25*log(9/25*3,2) + 12/25*log(12/25*3,2) + 4/25*log(4/25*3,2)
9/25*log(9/25*3,exp(1)) + 12/25*log(12/25*3,exp(1)) + 4/25*log(4/25*3,exp(1))
1/3*(log(1/3*25/9,exp(1)) + log(1/3*25/12, exp(1)) + log(1/3*25/4, exp(1)))
if (!requireNamespace("BiocManager", quietly=TRUE))+     install.packages("BiocManager")> BiocManager::install("mixtools")> BiocManager::install("bcellViper")> BiocManager::install("viper")
if (!requireNamespace("BiocManager", quietly=TRUE))+     install.packages("BiocManager")
BiocManager::install("mixtools")
R.version
update.packages()
help("update.packages")
old.packages()
update.packages(ask = FALSE)
.libPaths()
update.packages(ask = FALSE)
install.packages("ade4")
library(ade4)
update.packages(ask = FALSE)
if (!requireNamespace("BiocManager", quietly=TRUE))+     install.packages("BiocManager")
BiocManager::install("mixtools")
BiocManager::install("mixtools")
BiocManager::install("mixtools")
install.packages("installr")
library(istallr)
library(installr)
updateR()
6*60*60
version
version
getwd()
setwd("/Desktop")
setwd("Desktop")
setwd("silhClust")
gewd()
getwd()
sessionInfo(0)
sessionInfo()
devtools::document()
build()
devtools::build()
devtools::install()
detach("package:silhClust", unload = TRUE)
help(sum)
devtools::document()
devtools::build()
devtools::install()
library(silhClust)
help(GridSearch)
help(GridSearch)
help(GridSearch)
help(GridSearch)
help(GridSearch)
help(GridSearch)
help(GridSearch)
help(GridSearch)
GridSearch2
source("~/Desktop/silhClust/R/GridSearch2.R", echo=TRUE)
build()
library(devtools)
build0
build()
install()
library(silhClust)
help("GridSearch2")
GridSearch2
View(GridSearch2)
View(GridSearch2)
getwd()
rm(list=ls()) # cleans workspace
#.rs.restartR() # restart memory to free RAM
gc()
cat("\014")
######
library(dplyr)
library(ggplot2)
library(Seurat)
library(SeuratObject)
library(reticulate)
library(anndata) #reticulate::install_miniconda(); anndata::install_anndata()
library(Matrix)
library(patchwork)
library(SparseM)
library(spam)
library(tidyverse)
library(RCurl)
library(cowplot)
library(purrr)
library(celldex) # databases of cell labels
library(PISCES)
library(SingleR)
library(scuttle)
library(scater)
library(infercnv)
library(silhClust)
library(doParallel)
setwd(paste0("/Users/",Sys.info()[["user"]],"/Desktop/NEPC_PatientsCodes"))
ObjFold <- paste0("../NEPCPatients/SeuratObjects/dimReduc/")
files <- list.files(ObjFold)
print("parameters for testing, then set actual parameters")
res <- seq(0.01,1,by = 0.01) # resolutions for Louvain algorithm
n_bootstraps <- c(1,2,) # number of resamplings
kNNs <- seq(3,7,by=2)
k = files[1]
name <- paste0("P",p_num)
p_num <- 1
name <- paste0("P",p_num)
S.obj <- readRDS(file=paste0(ObjFold,"/",k))
assign(name,S.obj)
object=get(name)
assay.name='SCT'
.resolutions=res
.bootstraps=n_bootstraps
n_bootstraps <- c(1,2,) # number of resamplings
n_bootstraps <- c(1,2) # number of resamplings
.bootstraps=n_bootstraps
.knns=kNNs
.pct_cells=pct
pct <- 80 # % cells to resample
.pct_cells=pct
.replace=FALSE
.type="PCA"
.dims=1:20
.clust_alg="Louvain"
if (Sys.info()['sysname'] == "Windows"){
clust.type <- "PSOCK"
} else if ( (Sys.info()['sysname'] == "Linux") | (Sys.info()['sysname'] == "Darwin") ) {
clust.type <- "FORK"
}
n_cores <- parallel::detectCores()-free.cores
myCluster <- parallel::makeCluster(n_cores,type = clust.type)
doParallel::registerDoParallel(myCluster)
n_cells_to_subsample <- round(ncol(object)*.pct_cells/100)
n_cells_to_subsample
.clust_alg = switch(.clust_alg,
"Louvain"= 1,
"Louvain-mult-ref"=2,
"SLM"=3,
"Leiden"=4)
.knns
.bootstraps
.knns
a_knn = .knns[1]
a_knn
idx = 1
set.seed(idx)
n_cells_to_subsample <- round(ncol(object)*.pct_cells/100)
n_cells_to_subsample
selected_samples <- sample(colnames(object),size=n_cells_to_subsample,replace=.replace)
selelected_samples
selected_samples <- sample(colnames(object),size=n_cells_to_subsample,replace=.replace)
selected_samples
x <- object[ , colnames(object) %in% selected_samples ]
.type="PCA"
x.dist <- as.matrix(as.dist( 1-cor( x[[assay.name]]@scale.data,method = "pea" )))
x@graphs <- Seurat::FindNeighbors(x.dist,
distance.matrix = TRUE,
verbose = TRUE,
k.param = a_knn,
annoy.metric = "euclidean",
dims=.dims,
compute.SNN = TRUE)
x.dist <- as.matrix(as.dist( 1-cor( t(x@reductions$pca@cell.embeddings),method = "pea" )))
dim(x.dist)
x <- Seurat::FindNeighbors(x,
reduction = "pca",
verbose = TRUE,
k.param = a_knn,
annoy.metric = "euclidean",
dims=.dims,
compute.SNN = TRUE)
names(x@graphs) <- c("nn", "snn")
x@graphs
# Find Clusters
x <- Seurat::FindClusters( x,
graph.name = "snn",
resolution = .resolutions,
verbose = FALSE,
modularity.fxn = 1,
algorithm = .clust_alg,
random.seed = my_seed
)
idx
set.seed(idx)
idx
# Find Clusters
x <- Seurat::FindClusters( x,
graph.name = "snn",
resolution = .resolutions,
verbose = FALSE,
modularity.fxn = 1,
algorithm = .clust_alg,
random.seed = idx
)
help(FindClusters)
x@seurat_clusters
30*5
30*5*20
30*5*20
3085
3085*20
30*6*20
0.8*30*6*20
rm(list=ls()) # cleans workspace
#.rs.restartR() # restart memory to free RAM
gc()
cat("\014")
######
library(dplyr)
library(ggplot2)
library(Seurat)
library(SeuratObject)
library(reticulate)
library(anndata) #reticulate::install_miniconda(); anndata::install_anndata()
library(Matrix)
library(patchwork)
library(SparseM)
library(spam)
library(tidyverse)
library(RCurl)
library(cowplot)
library(purrr)
library(celldex) # databases of cell labels
library(PISCES)
library(SingleR)
library(scuttle)
library(scater)
library(infercnv)
library(doParallel)
free.cores <- 2 # number of cores not used for computation
res.val <- 300 # value of resolution for plots
palette <- DiscretePalette(20,"polychrome")
print("This analysis is based on 6 mice")
setwd(paste0("/Users/",Sys.info()[["user"]],"/Desktop/miceCodes"))
data_dir <- "../mice_data/SeuratObjects/"
list.files(data_dir)
files <- list.files(data_dir)
readRDS(paste0(data_dir,"/",files[1]))
gc()
S_obj <- readRDS(paste0(data_dir,"/",files[1]))
S_obj
S_obj@reductions
data-dir
data_dir
data_dir
load("../mice_codes/cycle.rda")
files
files[1:6]
source("C:/Users/zaneluc15010/Desktop/miceCodes/SeuratCC_prostateMice.R")
source("C:/Users/zaneluc15010/Desktop/miceCodes/SeuratCC_prostateMice.R")
source("C:/Users/zaneluc15010/Desktop/miceCodes/SeuratCC_prostateMice.R")
name
files[1]
substr(files[1],1,length(files[1])-4 )
length(files[1])
nchar(files[1]
)
substr(files[1],1,nchar(files[1])-4 )
source("C:/Users/zaneluc15010/Desktop/miceCodes/SeuratCC_prostateMice.R")
source("C:/Users/zaneluc15010/Desktop/miceCodes/SeuratCC_prostateMice.R")
stopCluster(myCluster)
stopCluster(myCluster)
source("C:/Users/zaneluc15010/Desktop/miceCodes/SeuratCC_prostateMice.R")
devtools::document()
library(devtools)
build()
install()
library(silhClust)
lsf.str("package:silhClust")
devtools::document()
build()
install()
help(SingleR)
library(SIngleR)
library(SingleR)
library(SingleR)
help(SingleR)
browseVignettes(SingleR
)
browseVignettes("SingleR"
)
help(SCTransform)
help(SCTransform)
help(as.SingleCellExperiment)
getwd()
setwd("\\isilon.c2b2.columbia.edu\c2b2\ac_lab\lz2841")
setwd("Y://isilon.c2b2.columbia.edu/c2b2/ac_lab/lz2841")
setwd("Y:/isilon.c2b2.columbia.edu/c2b2/ac_lab/lz2841")
setwd("Y:\\isilon.c2b2.columbia.edu\c2b2\ac_lab\lz2841")
setwd("Y:")
setwd("C:")
setwd("U:")
setwd("u:")
setwd("U:")
setwd("Y:")
setwd("Y:/")
choose.dir()
choose.dir()
setwd("E:")
ls
ls()
getwd()
