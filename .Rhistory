a
class(a)
net_list <- vector(mode=list())
net_list <- vector(mode=list)
net_list <- vector(mode="list")
net_list
a
name(net_list) <- a
names(net_list) <- a
list.files(networks)
names.nets <- list.files(networks)
nets.names <- list.files(networks)
nets.names
nets.names
net_list <- vector(mode="list",length=length(nets.names))
net_list
sub(nets.names,".rds","" )
nets.name
nets.names
help(sub)
gsub(nets.names,".rds","" )
gsub(nets.names,".rds","",fixed=TRUE)
a
nets.names
a <- gsub(nets.names,".rds","",fixed=TRUE)
a
a
nets.names
nets.names <- sub(nets.names,".rds","",fixed=TRUE)
nets.names
nets.names <- list.files(networks)
nets.names
a <- sub(nets.names[[1]],".rds","",fixed=TRUE)
a
nets.names
a <- sub(".rds","",nets.names[[1]],fixed=TRUE)
a
a <- sub(".rds","",nets.names,fixed=TRUE)
a
nets.names <- sub(".rds","",nets.names,fixed=TRUE)
nets.names
names(net_list) <- nets.names
net_list
nets.names <- sub("_pruned.rds","",nets.names,fixed=TRUE)
net_list <- vector(mode="list",length=length(nets.names))
names(net_list) <- nets.names
net_list
nets.names <- list.files(networks)
nets.names <- sub("_pruned.rds","",nets.names,fixed=TRUE)
net_list <- vector(mode="list",length=length(nets.names))
names(net_list) <- nets.names
net_lists
net_listy
net_list
nets.names <- list.files(networks)
nets.names
net_list
for (nn in nets.names){
net_list[[nn]] <- readRDS(nets.names[[nn]])
}
length(nets.names)
nets.names
help(readRDS)
nn
names(net_list) <- nets.names
nets.names
names(net_list) <- nets.names
net_list
net_list[[1]]
net_list$nets.names
net_list$nets.names[[1]]
net_list$nets.names[[1]] <- a
net_list
net_list
#######
# Folders preparation
networks <- paste0(ScratchFolder,"NEPCPatients/ARACNe_files/P5/nets_pruned_collected/")
nets.names <- list.files(networks)
net_list <- vector(mode="list",length=length(nets.names)) # initialize list collecting
names(net_list) <- nets.names
net_list
net_list
net_list$$nets.names[1]
net_list$nets.names[1]
net_list$nets.names[1] <- a
net_list$nets.names[1] <- "a"
net_list
nets$names[1]
nets.names[1]
l_num <- 1
for (nn in nets.names){
net_list[[l_num]] <- readRDS(nets.names[[nn]])
l_num <- l_num + 1
}
nn
for (nn in 1:length(nets.names)){
net_list[[l_num]] <- readRDS(nets.names[[nn]])
l_num <- l_num + 1
}
names(net_list) <- nets.names
net_list <- vector(mode="list",length=length(nets.names)) # initialize list collecting
net_list[[nn]] <- readRDS(nets.names[[nn]])
networks
nn
net_list[[nn]] <- readRDS(nets.names[[nn]])
net_list[[nn]] <- readRDS(nets.names[nn])
nets.names[nn]
help("readRDS")
net_list[[nn]] <- readRDS(file=nets.names[nn])
x <- readRDS("W:/NEPCPatients/ARACNe_files/P5/nets_pruned_collected/P5_endothelial_TFs_coTFs_pruned.rds")
x
net_list[[nn]] <- readRDS(file=paste0(networks,nets.names[nn]))
net_list
#######
# Folders preparation
networks <- paste0(ScratchFolder,"NEPCPatients/ARACNe_files/P5/nets_pruned_collected/")
nets.names <- list.files(networks)
net_list <- vector(mode="list",length=length(nets.names)) # initialize list collecting
names(net_list) <- nets.names
for (nn in 1:length(nets.names)){
net_list[[nn]] <- readRDS(file=paste0(networks,nets.names[nn]))
l_num <- l_num + 1
}
nets.names <- sub("_pruned.rds","",nets.names,fixed=TRUE)
names(net_list) <- nets.names
for (nn in 1:length(nets.names)){
net_list[[nn]] <- readRDS(file=paste0(networks,nets.names[nn]))
l_num <- l_num + 1
}
#######
# Folders preparation
networks <- paste0(ScratchFolder,"NEPCPatients/ARACNe_files/P5/nets_pruned_collected/")
nets.names <- list.files(networks)
net_list <- vector(mode="list",length=length(nets.names)) # initialize list collecting
names(net_list) <- nets.names
for (nn in 1:length(nets.names)){
net_list[[nn]] <- readRDS(file=paste0(networks,nets.names[nn]))
l_num <- l_num + 1
}
nets.names <- sub("_pruned.rds","",nets.names,fixed=TRUE)
net_list
net_list
help("pruneRegulon")
unpruned_endo <- readRDS("W:/NEPCPatients/ARACNe_files/P5/ARACNe_outputs_endothelial/P5_endothelial_TFs_coTFs_unPruned.rds")
unpruned_endo
pruned_endo <- pruneRegulon(unpruned_endo,cutoff=50)
pruned_endo
net_list[[1]]
pruneRegulon
pruned_endo1 <- pruneRegulon(unpruned_endo,cutoff=50)
pruned_endo2 <- pruneRegulon(unpruned_endo,cutoff=50,eliminate=TRUE)
pruned_endo2
pruned_endo1
unpruned_endo
pruned_endo1
pruned_endo2
pruned_endo3 <- pruneRegulon(unpruned_endo,cutoff=50,adaptive=FALSE,eliminate=TRUE)
pruned_endo3
pruned_endo3 <- pruneRegulon(unpruned_endo,cutoff=50,adaptive=FALSE,eliminate=FALSE)
pruned_endo3
pruned_endo3
pruned_endo1
pruned_endo3 <- pruneRegulon(unpruned_endo,cutoff=50,adaptive=FALSE,eliminate=TRUE)
pruned_endo3
#######
# Folders preparation
networks <- paste0(ScratchFolder,"NEPCPatients/ARACNe_files/P5/nets_unpruned_collected/")
nets.names <- list.files(networks)
net_list <- vector(mode="list",length=length(nets.names)) # initialize list collecting
names(net_list) <- nets.names
net_list[[nn]]
net_list
names(net_list) <- nets.names
for (nn in 1:length(nets.names)){
net_list[[nn]] <- readRDS(file=paste0(networks,nets.names[nn]))
net_list[[nn]] <- pruneRegulon(net_list[[nn]])
l_num <- l_num + 1
}
nets.names <- sub("_pruned.rds","",nets.names,fixed=TRUE)
nets.names
nets.names <- sub("_pruned.rds","",nets.names,fixed=TRUE)
nets.names
nets.names <- sub("_unpruned.rds","",nets.names,fixed=TRUE)
nets.names
nets.names <- sub("_unPruned.rds","",nets.names,fixed=TRUE)
nets.names
help(viper)
help(vipere)
help(viper)
rm(list=ls()) # cleans workspace
#.rs.restartR() # restart memory to free RAM
gc()
cat("\014")
suppressWarnings(suppressMessages(library(dplyr)))
suppressWarnings(suppressMessages(library(ggplot2)))
suppressWarnings(suppressMessages(library(Seurat)))
suppressWarnings(suppressMessages(library(SeuratObject)))
#library(reticulate)
#library(anndata) #reticulate::install_miniconda(); anndata::install_anndata()
suppressWarnings(suppressMessages(library(Matrix)))
suppressWarnings(suppressMessages(library(SparseM)))
suppressWarnings(suppressMessages(library(tidyverse)))
suppressWarnings(suppressMessages(library(cowplot)))
suppressWarnings(suppressMessages(library(purrr)))
suppressWarnings(suppressMessages(library(PISCES)))
#suppressWarnings(suppressMessages(library(readxl)))
suppressWarnings(suppressMessages(library(data.table)))
suppressWarnings(suppressMessages(library(silhClust)))
suppressWarnings(suppressMessages(library(viper)))
suppressWarnings(suppressMessages(library(pheatmap)))
suppressWarnings(suppressMessages(library(optparse)))
normalization="Log-CPM" # "CPM" "Log-CPM"
ext_ref <- "no" #"yes" "no"
visualization <- "no" # "yes" no"
res.val <- 300
plt.size <- 1080 # width, height
Computer <- "Dell_Xps15" #Dell_Xps15" # "iMac # "CentOS"
p_num <- 1
switch(Computer,
"Dell_Xps15"={
CodesFolder <- paste0("/Users/",Sys.info()[["user"]],"/Desktop/")
ScratchFolder <- paste0("W:/")
},
"iMac"={
CodesFolder <- paste0("/Users/",Sys.info()[["user"]],"/Desktop/")
ScratchFolder <- paste0("/Volumes/lz2841-2/")
},
"CentOS"={
# optparse
option_list = list(
make_option(c("-p","--p_num"), type="character",default=NULL,
help="patient number (p_num)", metavar="character")
);
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
if (is.null(opt$p_num)){
print_help(opt_parser)
stop("Provide patient number p_num for infercnv analysis.n",
call.=FALSE)
} else {
p_num <- as.integer(opt$p_num)
}
CodesFolder <- paste0("/ifs/scratch/c2b2/ac_lab/lz2841/")
ScratchFolder <- CodesFolder
}
)
source(paste0(ScratchFolder,"R_CustomFunctions/PlottingFunctions.R"))
source(paste0(ScratchFolder,"R_CustomFunctions/DataPreprocessing.R"))
cat(paste0("Input parameters: \nplots resolution: ",res.val," dpi",
"\nCalculation performed on: ",Computer,
"\nPatient number (p_num): ", p_num,
"\nNormalization: ", normalization))
#######
# Folders preparation
ARACNe_files <- paste0(ScratchFolder,"NEPCPatients/ARACNe_files/")
patients <- list.dirs(ARACNe_files,full.name=FALSE,recursive=FALSE)
#######
# Savings folder
Viper_f <- paste0(ScratchFolder,"NEPCPatients/Viper_analysis/",patients)
invisible(sapply(Viper_f, function(x){
if (!file.exists(x)){
dir.create(x,recursive = TRUE)
}})
)
print("Then add all patients")
k=patients[1]
compartment <- "epithelial cell_T_vs_Norm"
# Seurat object for the epithelial cell compartment: tumor + non tumor
dataDir <- paste0(ScratchFolder,"NEPCPatients/SeuratObjects/compartments_inferCNV/",k,"/")
S.obj <- readRDS(file=paste0(dataDir,k,"_",compartment,".rds"))
cat("Group 1 is pred_normal; group 2 is pred_tumor.\n")
groups <- unique(S.obj$tumor_prediction)
# regulon for the epithelial compartment (tumor cells)
netDir <- paste0(ARACNe_files,k,"/ARACNe_outputs/")
net_name <- list.files(path=netDir,full.name=TRUE,pattern="tumor_TFs_coTFs_pruned")
net_tumor_epithelial <- readRDS(file=net_name) # regulon
help("pruneRegulon")
net_tumor_epithelial <- pruneRegulon(net_tumor_epithelial)
net_tumor_epithelial
net_name <- list.files(path=netDir,full.name=TRUE,pattern="tumor_TFs_coTFs_unPruned")
net_tumor_epithelial <- readRDS(file=net_name) # regulon
net_tumor_epithelial <- pruneRegulon(net_tumor_epithelial)
net_tumor_epitheliaL
net_tumor_epithelial
######
# Viper
Idents(S.obj) <- S.obj$tumor_prediction
if (length(groups) == 2){ # both tumor and normal cells in epithelial compartment
Normal <- subset(x=S.obj,idents="pred_normal")
Tumor <- subset(x=S.obj,idents="pred_tumor")
Normal[["Viper"]] <- CreateAssayObject(counts=Normal[["RNA"]]@counts)
Normal@active.assay <- "Viper"
switch(normalization,
"CPM"={
Normal <- NormalizeData(object=Normal,
normalization.method = "RC",
scale.factor = 1e6) # Transformation to CPM
},
"Log-CPM"={
Normal[["Viper"]]@data <- LogNormalize(data=Normal[["Viper"]]@counts,
scale.factor=1e6)
})
# regulon for the epithelial compartment (normal cells)
netDir <- paste0(ARACNe_files,k,"/ARACNe_outputs_epithelial_normal/")
net_name <- list.files(path=netDir,full.name=TRUE,pattern="normal_TFs_coTFs_pruned")
net_normal_epithelial <- readRDS(file=net_name) # regulon
} else if (length(groups) == 1){ # only tumor cells in epithelial compartment
Tumor <- S.obj
}
# regulon for the epithelial compartment (normal cells)
netDir <- paste0(ARACNe_files,k,"/ARACNe_outputs_epithelial_normal/")
net_name <- list.files(path=netDir,full.name=TRUE,pattern="normal_TFs_coTFs_unPruned")
net_normal_epithelial <- readRDS(file=net_name) # regulon
Tumor[["Viper"]] <- CreateAssayObject(counts=Tumor[["RNA"]]@counts)
Tumor@active.assay <- "Viper"
switch(normalization,
"CPM"={
Tumor <- NormalizeData(object=Tumor,
normalization.method = "RC",
scale.factor = 1e6) # Transformation to CPM
},
"Log-CPM"={
Tumor[["Viper"]]@data <- LogNormalize(data=Tumor[["Viper"]]@counts,
scale.factor=1e6)
})
Tumor[["Viper"]]@misc$scaled <- standardize(X=as.matrix(Tumor[["Viper"]]@data),
reference="internal")
genes_names <- rownames(Tumor[["Viper"]]@data)
Tumor[["Viper"]]@misc$nes <- viper(eset=Tumor[["Viper"]]@misc$scaled,
regulon=net_tumor_epithelial,
method="none")
genes_names <- rownames(Tumor[["Viper"]]@data)
Tumor[["Viper"]]@misc$nes <- viper(eset=Tumor[["Viper"]]@misc$scaled,
regulon=net_tumor_epithelial,
method="none")
Tumor[["Viper"]]@scale.data <- standardize(Tumor[["Viper"]]@misc$nes)
if (length(groups) == 2){ # both tumor and normal
# Viper using external reference
Tumor[["Viper"]]@misc$scaled_ext <- standardize(X=as.matrix(Tumor[["Viper"]]@data),
reference="external",
Xref=Normal[["Viper"]]@data)
Tumor[["Viper"]]@misc$nes_ext <- viper(eset=Tumor[["Viper"]]@misc$scaled_ext,
regulon=net_tumor_epithelial,
method="none") # viper signature
# NES obtained using the external signature
Tumor[["Viper"]]@misc$scaled_ext <- standardize(Tumor[["Viper"]]@misc$nes_ext)
}
# MR list
MRs_list <- rownames(Tumor[["Viper"]]@scale.data) # list of the master regulators
Tumor <- RunPCA(Tumor,
assay="Viper",
features=MRs_list,  # it uses scale.data
npcs=50,
verbose=FALSE,
reduction.name="pca.MRs",
reduction.key="PCmrs_")
numPCs <- ncol(Tumor@reductions[["pca.MRs"]]@cell.embeddings)
Tumor@reductions[["umap.MRs"]] <- RunUMAP(t(Tumor[["Viper"]]@scale.data),
assay="Viper", # computed using assay: Viper
#reduction="pca.MRs",
#features=MRs_list,
#dims=1:numPCs,
n.components=3L)
DimPlot(Tumor,
reduction="umap.MRs")
Tumor <- RunUMAP(Tumor,
assay="Viper",
reduction="pca.MRs",
dims=1:numPCs,
n.components=3L,
reduction.name="umap_pca.MRs",
reduction.key="UMAPmrs_")
DimPlot(Tumor,
reduction="umap_pca.MRs")
# 3. TSNE on scale.data - all features
Tumor@reductions[["tsne.MRs"]] <- RunTSNE(t(Tumor[["Viper"]]@scale.data),
assay="Viper", # computed using assay: Viper
#reduction="pca.MRs",
#features=MRs_list,
#dims=1:numPCs,
dim.embed=3)
DimPlot(Tumor,
reduction="tsne.MRs")
# 4. TSNE on principal components (pca.MRs)
Tumor <- RunTSNE(Tumor,
assay="Viper",
reduction="pca.MRs",
dims=1:numPCs,
dim.embed=3,
reduction.name="tsne_pca.MRs",
reduction.key="TSNEmrs_")
DimPlot(Tumor,
reduction="tsne_pca.MRs")
dim(Tumor)
dim(Tumor[["Viper"]])
dim(Tumor[["Viper"]]@scale.data)
rm(list=ls()) # cleans workspace
#.rs.restartR() # restart memory to free RAM
gc()
cat("\014")
suppressWarnings(suppressMessages(library(dplyr)))
suppressWarnings(suppressMessages(library(ggplot2)))
suppressWarnings(suppressMessages(library(Seurat)))
suppressWarnings(suppressMessages(library(SeuratObject)))
#library(reticulate)
#library(anndata) #reticulate::install_miniconda(); anndata::install_anndata()
suppressWarnings(suppressMessages(library(Matrix)))
suppressWarnings(suppressMessages(library(SparseM)))
suppressWarnings(suppressMessages(library(tidyverse)))
suppressWarnings(suppressMessages(library(cowplot)))
suppressWarnings(suppressMessages(library(purrr)))
suppressWarnings(suppressMessages(library(PISCES)))
#suppressWarnings(suppressMessages(library(readxl)))
suppressWarnings(suppressMessages(library(data.table)))
suppressWarnings(suppressMessages(library(silhClust)))
suppressWarnings(suppressMessages(library(viper)))
suppressWarnings(suppressMessages(library(pheatmap)))
suppressWarnings(suppressMessages(library(optparse)))
normalization="Log-CPM" # "CPM" "Log-CPM"
res.val <- 300
plt.size <- 1080 # width, height
Computer <- "Dell_Xps15" #Dell_Xps15" # "iMac # "CentOS"
switch(Computer,
"Dell_Xps15"={
CodesFolder <- paste0("/Users/",Sys.info()[["user"]],"/Desktop/")
ScratchFolder <- paste0("W:/")
},
"iMac"={
CodesFolder <- paste0("/Users/",Sys.info()[["user"]],"/Desktop/")
ScratchFolder <- paste0("/Volumes/lz2841-2/")
},
"CentOS"={
# optparse
option_list = list(
make_option(c("-p","--p_num"), type="character",default=NULL,
help="patient number (p_num)", metavar="character")
);
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
if (is.null(opt$p_num)){
print_help(opt_parser)
stop("Provide patient number p_num for infercnv analysis.n",
call.=FALSE)
} else {
p_num <- as.integer(opt$p_num)
}
CodesFolder <- paste0("/ifs/scratch/c2b2/ac_lab/lz2841/")
ScratchFolder <- CodesFolder
}
)
source(paste0(ScratchFolder,"R_CustomFunctions/PlottingFunctions.R"))
source(paste0(ScratchFolder,"R_CustomFunctions/DataPreprocessing.R"))
cat(paste0("Input parameters: \nplots resolution: ",res.val," dpi",
"\nCalculation performed on: ",Computer,
"\nPatient number (p_num): ", p_num,
"\nNormalization: ", normalization))
#######
# Folders preparation
networks <- paste0(ScratchFolder,"NEPCPatients/ARACNe_files/P5/nets_unpruned_collected/")
nets.names <- list.files(networks)
net_list <- vector(mode="list",length=length(nets.names)) # initialize list collecting
names(net_list) <- nets.names
for (nn in 1:length(nets.names)){
net_list[[nn]] <- readRDS(file=paste0(networks,nets.names[nn]))
net_list[[nn]] <- pruneRegulon(net_list[[nn]])
l_num <- l_num + 1
}
for (nn in 1:length(nets.names)){
net_list[[nn]] <- readRDS(file=paste0(networks,nets.names[nn]))
net_list[[nn]] <- pruneRegulon(net_list[[nn]])
}
nets.names <- sub("_unPruned.rds","",nets.names,fixed=TRUE)
nets.names
help(viper)
help(PISCESViper)
# Seurat Objects
Seurat_f <- paste0(ScratchFolder,"NEPCPatients/ARACNe_files/P5/")
Seurat_f
# Seurat Objects
Seurat_f <- paste0(ScratchFolder,"NEPCPatients/ARACNe_files/P5/")
# Seurat Objects
dataDir <- paste0(ScratchFolder,"NEPCPatients/SeuratObjects/compartments_inferCNV/",k,"/")
# Seurat Objects
dataDir <- paste0(ScratchFolder,"NEPCPatients/SeuratObjects/compartments_inferCNV/P5/")
dataDir
list.filesdataDir)
list.files(dataDir)
objs_names <- list.files(dataDir)
objs_names
objs_names[objs_names=="P5_epithelial cell_T_vs_Norm.rds"] <- NULL
objs_names[objs_names=="P5_epithelial cell_T_vs_Norm.rds"] <- []
rm(objs_names[objs_names=="P5_epithelial cell_T_vs_Norm.rds"])
objs_names[objs_names=="P5_epithelial cell_T_vs_Norm.rds"] <- "a"
objs_names
objs_names <- list.files(dataDir)
objs_names[-objs_names=="P5_epithelial cell_T_vs_Norm.rds"]
objs_names[objs_names=="P5_epithelial cell_T_vs_Norm.rds"]
objs_names[!objs_names=="P5_epithelial cell_T_vs_Norm.rds"]
objs_names <- objs_names[!objs_names=="P5_epithelial cell_T_vs_Norm.rds"]
objs_names
objs_list <- vector(mode="list",length=length(objs_names))
objs_list
for (nn in 1:length(objs_list)){
objs_list[[nn]] <- readRDS(file=paste0(dataDir,objs_names))
}
objs_names
for (nn in 1:length(objs_list)){
objs_list[[nn]] <- readRDS(file=paste0(dataDir,objs_names[nn]))
}
help(viper)
objs_list
class(objs_list[[nn]])
