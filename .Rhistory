help(GridSearch)
help(GridSearch)
help(GridSearch)
GridSearch2
source("~/Desktop/silhClust/R/GridSearch2.R", echo=TRUE)
build()
library(devtools)
build0
build()
install()
library(silhClust)
help("GridSearch2")
GridSearch2
View(GridSearch2)
View(GridSearch2)
getwd()
rm(list=ls()) # cleans workspace
#.rs.restartR() # restart memory to free RAM
gc()
cat("\014")
######
library(dplyr)
library(ggplot2)
library(Seurat)
library(SeuratObject)
library(reticulate)
library(anndata) #reticulate::install_miniconda(); anndata::install_anndata()
library(Matrix)
library(patchwork)
library(SparseM)
library(spam)
library(tidyverse)
library(RCurl)
library(cowplot)
library(purrr)
library(celldex) # databases of cell labels
library(PISCES)
library(SingleR)
library(scuttle)
library(scater)
library(infercnv)
library(silhClust)
library(doParallel)
setwd(paste0("/Users/",Sys.info()[["user"]],"/Desktop/NEPC_PatientsCodes"))
ObjFold <- paste0("../NEPCPatients/SeuratObjects/dimReduc/")
files <- list.files(ObjFold)
print("parameters for testing, then set actual parameters")
res <- seq(0.01,1,by = 0.01) # resolutions for Louvain algorithm
n_bootstraps <- c(1,2,) # number of resamplings
kNNs <- seq(3,7,by=2)
k = files[1]
name <- paste0("P",p_num)
p_num <- 1
name <- paste0("P",p_num)
S.obj <- readRDS(file=paste0(ObjFold,"/",k))
assign(name,S.obj)
object=get(name)
assay.name='SCT'
.resolutions=res
.bootstraps=n_bootstraps
n_bootstraps <- c(1,2,) # number of resamplings
n_bootstraps <- c(1,2) # number of resamplings
.bootstraps=n_bootstraps
.knns=kNNs
.pct_cells=pct
pct <- 80 # % cells to resample
.pct_cells=pct
.replace=FALSE
.type="PCA"
.dims=1:20
.clust_alg="Louvain"
if (Sys.info()['sysname'] == "Windows"){
clust.type <- "PSOCK"
} else if ( (Sys.info()['sysname'] == "Linux") | (Sys.info()['sysname'] == "Darwin") ) {
clust.type <- "FORK"
}
n_cores <- parallel::detectCores()-free.cores
myCluster <- parallel::makeCluster(n_cores,type = clust.type)
doParallel::registerDoParallel(myCluster)
n_cells_to_subsample <- round(ncol(object)*.pct_cells/100)
n_cells_to_subsample
.clust_alg = switch(.clust_alg,
"Louvain"= 1,
"Louvain-mult-ref"=2,
"SLM"=3,
"Leiden"=4)
.knns
.bootstraps
.knns
a_knn = .knns[1]
a_knn
idx = 1
set.seed(idx)
n_cells_to_subsample <- round(ncol(object)*.pct_cells/100)
n_cells_to_subsample
selected_samples <- sample(colnames(object),size=n_cells_to_subsample,replace=.replace)
selelected_samples
selected_samples <- sample(colnames(object),size=n_cells_to_subsample,replace=.replace)
selected_samples
x <- object[ , colnames(object) %in% selected_samples ]
.type="PCA"
x.dist <- as.matrix(as.dist( 1-cor( x[[assay.name]]@scale.data,method = "pea" )))
x@graphs <- Seurat::FindNeighbors(x.dist,
distance.matrix = TRUE,
verbose = TRUE,
k.param = a_knn,
annoy.metric = "euclidean",
dims=.dims,
compute.SNN = TRUE)
x.dist <- as.matrix(as.dist( 1-cor( t(x@reductions$pca@cell.embeddings),method = "pea" )))
dim(x.dist)
x <- Seurat::FindNeighbors(x,
reduction = "pca",
verbose = TRUE,
k.param = a_knn,
annoy.metric = "euclidean",
dims=.dims,
compute.SNN = TRUE)
names(x@graphs) <- c("nn", "snn")
x@graphs
# Find Clusters
x <- Seurat::FindClusters( x,
graph.name = "snn",
resolution = .resolutions,
verbose = FALSE,
modularity.fxn = 1,
algorithm = .clust_alg,
random.seed = my_seed
)
idx
set.seed(idx)
idx
# Find Clusters
x <- Seurat::FindClusters( x,
graph.name = "snn",
resolution = .resolutions,
verbose = FALSE,
modularity.fxn = 1,
algorithm = .clust_alg,
random.seed = idx
)
help(FindClusters)
x@seurat_clusters
30*5
30*5*20
30*5*20
3085
3085*20
30*6*20
0.8*30*6*20
rm(list=ls()) # cleans workspace
#.rs.restartR() # restart memory to free RAM
gc()
cat("\014")
######
library(dplyr)
library(ggplot2)
library(Seurat)
library(SeuratObject)
library(reticulate)
library(anndata) #reticulate::install_miniconda(); anndata::install_anndata()
library(Matrix)
library(patchwork)
library(SparseM)
library(spam)
library(tidyverse)
library(RCurl)
library(cowplot)
library(purrr)
library(celldex) # databases of cell labels
library(PISCES)
library(SingleR)
library(scuttle)
library(scater)
library(infercnv)
library(doParallel)
free.cores <- 2 # number of cores not used for computation
res.val <- 300 # value of resolution for plots
palette <- DiscretePalette(20,"polychrome")
print("This analysis is based on 6 mice")
setwd(paste0("/Users/",Sys.info()[["user"]],"/Desktop/miceCodes"))
data_dir <- "../mice_data/SeuratObjects/"
list.files(data_dir)
files <- list.files(data_dir)
readRDS(paste0(data_dir,"/",files[1]))
gc()
S_obj <- readRDS(paste0(data_dir,"/",files[1]))
S_obj
S_obj@reductions
data-dir
data_dir
data_dir
load("../mice_codes/cycle.rda")
files
files[1:6]
source("C:/Users/zaneluc15010/Desktop/miceCodes/SeuratCC_prostateMice.R")
source("C:/Users/zaneluc15010/Desktop/miceCodes/SeuratCC_prostateMice.R")
source("C:/Users/zaneluc15010/Desktop/miceCodes/SeuratCC_prostateMice.R")
name
files[1]
substr(files[1],1,length(files[1])-4 )
length(files[1])
nchar(files[1]
)
substr(files[1],1,nchar(files[1])-4 )
source("C:/Users/zaneluc15010/Desktop/miceCodes/SeuratCC_prostateMice.R")
source("C:/Users/zaneluc15010/Desktop/miceCodes/SeuratCC_prostateMice.R")
stopCluster(myCluster)
stopCluster(myCluster)
source("C:/Users/zaneluc15010/Desktop/miceCodes/SeuratCC_prostateMice.R")
devtools::document()
library(devtools)
build()
install()
library(silhClust)
lsf.str("package:silhClust")
devtools::document()
build()
install()
help(SingleR)
library(SIngleR)
library(SingleR)
library(SingleR)
help(SingleR)
browseVignettes(SingleR
)
browseVignettes("SingleR"
)
help(SCTransform)
help(SCTransform)
help(as.SingleCellExperiment)
getwd()
setwd("\\isilon.c2b2.columbia.edu\c2b2\ac_lab\lz2841")
setwd("Y://isilon.c2b2.columbia.edu/c2b2/ac_lab/lz2841")
setwd("Y:/isilon.c2b2.columbia.edu/c2b2/ac_lab/lz2841")
setwd("Y:\\isilon.c2b2.columbia.edu\c2b2\ac_lab\lz2841")
setwd("Y:")
setwd("C:")
setwd("U:")
setwd("u:")
setwd("U:")
setwd("Y:")
setwd("Y:/")
choose.dir()
choose.dir()
setwd("E:")
ls
ls()
getwd()
devtools::document()
help(SA_tools)
library(silhClust)
help(SA_tools)
help(SAClustering)
rm(list=ls()) # cleans workspace
#.rs.restartR() # restart memory to free RAM
gc()
cat("\014")
# Preparing folders and load test data
######
Computer <- "Dell_Xps15" #Dell_Xps15" # "iMac # "CentOS"
switch(Computer,
"Dell_Xps15"={
CodesFolder <- paste0("/Users/",Sys.info()[["user"]],"/Desktop/")
ScratchFolder <- paste0("W:/")
},
"iMac"={
CodesFolder <- paste0("/Users/",Sys.info()[["user"]],"/Desktop/")
ScratchFolder <- paste0("/Volumes/lz2841-2/")
},
"CentOS"={
# optparse
option_list = list(
make_option(c("-p","--p_num"), type="character",default=NULL,
help="patient number (p_num)", metavar="chracter")
);
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
if (is.null(opt$p_num)){
print_help(opt_parser)
stop("Provide patient number p_num for infercnv analysis.n",
call.=FALSE)
} else {
p_num <- as.integer(opt$p_num)
}
CodesFolder <- paste0("/ifs/scratch/c2b2/ac_lab/lz2841/")
ScratchFolder <- CodesFolder
}
)
# test dataset
p_num <- 1 # to test
dimRed_file <- paste0(ScratchFolder,"NEPCPatients/SeuratObjects/dimReduc/P1_dimReduc_.rds")
S.obj <- readRDS(dimRed_file)
NN_range <- c(3,30) # min, max number of NN
par <- c(0.011,3.1/NN_range[2]) # resolution, kNN: initial values
lower <- c(0.01, NN_range[1]/NN_range[2]) # LB: resolution, normalized num NN
upper <- c(2,NN_range[2]/NN_range[2]) # UB
clust_alg <- 1 # for original Louvain algorithm
expected.val <- -1
absTol <- 1e-6
cat("Modify optimization parameters, especially temperature (not included here).\n")
control <- list(maxit=5000, # 5000 max number iterations
#threshold.stop = expected.val + absTol, # 1 (worst) -1 (best) silhouette
simple.function=FALSE,
verbose=TRUE,
smooth=FALSE, # smoothness objective function
max.call=1e7, # 1e7 max calls objective function
max.time=60*2, # (s) max running time - 1 h
temperature=1000000000,
verbose=TRUE,
seed=1234
)
##### Inputs to function
# if object is Seurat
assay.name <- "Viper"
dist <- "correlation"
cells.dims <- 2 # 1: cells on row, features on columns
cat("Make it generic.\n")
X <- S.obj[["Viper"]]@scale.data
if (cells.dims == 1){
# cells are along rows
d <- 1 - cor(t(X))
# cells are along columns
} else if (cells.dims == 2){
d <- 1 - cor(X)
}
setwd(paste0(CodesFolder,"silhClust/R/"))
source("SA_tools.R")
system.time(clustering_solution <- SAClustering(S.obj=S.obj,
res.range=c(0.01,10),
NN.range <- c(3,50), # min, max number of NN
assay="SCT",
control=control,
verbose=FALSE,
final=TRUE,
plot = TRUE,
reduction=TRUE,
clust_alg=4,
type.fun="group.mean.silhouette"
)
)
dimRed_file <- paste0(ScratchFolder,"NEPCPatients/SeuratObjects/dimReduc/P1_dimReduc_.rds")
S.obj <- readRDS(dimRed_file)
# test dataset
p_num <- 1 # to test
dimRed_file <- paste0(ScratchFolder,"NEPCPatients/SeuratObjects/dimReduc/P1_dimReduc_.rds")
S.obj <- readRDS(dimRed_file)
dimRed_file <- paste0(ScratchFolder,"NEPCPatients/SeuratObjects/dimReduc/P1_dimReduc_.rds")
S.obj <- readRDS(dimRed_file)
NN_range <- c(3,30) # min, max number of NN
control <- list(maxit=5000, # 5000 max number iterations
#threshold.stop = expected.val + absTol, # 1 (worst) -1 (best) silhouette
simple.function=FALSE,
verbose=TRUE,
smooth=FALSE, # smoothness objective function
max.call=1e7, # 1e7 max calls objective function
max.time=60*2, # (s) max running time - 1 h
temperature=1000000000,
verbose=TRUE,
seed=1234
)
setwd(paste0(CodesFolder,"silhClust/R/"))
source("SA_tools.R")
system.time(clustering_solution <- SAClustering(S.obj=S.obj,
res.range=c(0.01,10),
NN.range <- c(3,50), # min, max number of NN
assay="SCT",
control=control,
verbose=FALSE,
final=TRUE,
plot = TRUE,
reduction=TRUE,
clust_alg=4,
type.fun="group.mean.silhouette"
)
)
981.74/60
system.time(clustering_solution <- SAClustering(S.obj=S.obj,
res.range=c(0.01,2),
NN.range <- c(3,30), # min, max number of NN
assay="SCT",
control=control,
verbose=FALSE,
final=TRUE,
plot = TRUE,
reduction=TRUE,
clust_alg=4,
type.fun="group.mean.silhouette"
)
)
861/60
system.time(clustering_solution <- SAClustering(S.obj=S.obj,
res.range=c(0.01,2),
NN.range <- c(3,30), # min, max number of NN
assay="SCT",
control=control,
verbose=FALSE,
final=TRUE,
plot = TRUE,
reduction=TRUE,
clust_alg=1,
type.fun="group.mean.silhouette"
)
)
482/60
help(is.null)
par.init=NULL
par.init
is.null(par.init)
!is.null(par.init)
if (!is.null(par.init)){
par.init[2] <- par.init[2]/NN.range[2]
}
NN.range
par.init
par.init <- c(0.5,0.6)
par.init <- c(0.5,15)
if (!is.null(par.init)){
par.init[2] <- par.init[2]/NN.range[2]
}
par.init
clustering_solution
load('pbmc')
load("pbmc")
load("pbmc")
help(GenSA)
23.90*2
GenSA
library(GenSA)
enSA
GenSA
clustering_solution
usethis::document()
devtools::document()
rm(list = c("obj.features", "obj.functions", "obj.reduction", "SAClustering"))
devtools::document()
library(silhClust)
library(silhClust)
help(SAClustering)
clustering_solution
library(Seurat)
load("pbmc")
pbmc <- readRDS("../data/pbmc3k_final.rds")
plan("multiprocess", workers = 4)
clustering_solution
help(SAClusteting)
help(SAClustering)
devtools::document()
library(silhClust)
devtools::document()
help(SAClustering)
help(sum)
help(UMAP)
help(DimPlot)
devtools::document()
library(silhClust)
help(SAClustering)
devtools::document()
devtools::document()
library(silhClust)
help(SAClustering)
devtools::document()
devtools::document()
help(SAClustering)
library(silhClust)
help(SAClustering)
library(silhClust)
help(SAClustering)
devtools::document()
help(SAClustering)
detach("silhClust",unload=TRUE)
detach("package::silhClust",unload=TRUE)
detach("package:silhClust",unload=TRUE)
library(silhClust)
help(SAClustering)
list.files()
getwd()
help(SA_tools)
devtools::document()
help(SAClustering)
build()
devtools::build()
devtools::check()
install()
devtools::install()
detach("package:silhClust",unload=TRUE)
library(silhClust)
help(SAClustering)
help(SAClustering)
devtools::build()
devtools::install()
detach("package:silhClust",unload=TRUE)
library(silhClust)
help(SAClustering)
help(SAClustering)
help(SAClustering)
detach("package:silhClust",unload=TRUE)
devtools::document()
devtools::build()
devtools::install()
library(silhClust)
help(SAClustering)
X <- S.obj@reductions[[reduction.slot]]@cell.embeddings
reduction.slot <- "pca"
X <- S.obj@reductions[[reduction.slot]]@cell.embeddings
X
dim(X)
Tumor@reductions[["umap"]]
X
class(X)
PISCES::CPMTransform(X)
dim(PISCES::CPMTransform(X))
