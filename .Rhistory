help(log)
9/25*log(9/25,2) + 12/25*log(12/25*3,2) + 4/25*log(4/25*3,2)
9/25*log(9/25*3,2) + 12/25*log(12/25*3,2) + 4/25*log(4/25*3,2)
9/25*log(9/25*3,exp(1)) + 12/25*log(12/25*3,exp(1)) + 4/25*log(4/25*3,exp(1))
1/3*(log(1/3*25/9,exp(1)) + log(1/3*25/12, exp(1)) + log(1/3*25/4, exp(1)))
if (!requireNamespace("BiocManager", quietly=TRUE))+     install.packages("BiocManager")> BiocManager::install("mixtools")> BiocManager::install("bcellViper")> BiocManager::install("viper")
if (!requireNamespace("BiocManager", quietly=TRUE))+     install.packages("BiocManager")
BiocManager::install("mixtools")
R.version
update.packages()
help("update.packages")
old.packages()
update.packages(ask = FALSE)
.libPaths()
update.packages(ask = FALSE)
install.packages("ade4")
library(ade4)
update.packages(ask = FALSE)
if (!requireNamespace("BiocManager", quietly=TRUE))+     install.packages("BiocManager")
BiocManager::install("mixtools")
BiocManager::install("mixtools")
BiocManager::install("mixtools")
install.packages("installr")
library(istallr)
library(installr)
updateR()
6*60*60
version
version
.rs.restartR()
library(GridSearch2)
library(silhClust)
help(GridSearch2)
GridSearch2
detach("package:silhClust",unload=TRUE)
sessionInfo()
library(silhClust)
help(GridSearch2)
GridSearch2
search()
search()
source("~/Desktop/NEPC_PatientsCodes/Viper_P2_NEPCPatients.R", echo=TRUE)
source("~/Desktop/NEPC_PatientsCodes/Viper_P2_NEPCPatients.R", echo=TRUE)
per.group20_MRs <- sort(viper_m.Stouffer,decreasing=T)
per.group20_MRs
per.group20_MRs <- c(head(names(per.group20_MRs),n_top), tail(names(per.group20_MRs),n_top))
per.group20_MRs
source("~/Desktop/NEPC_PatientsCodes/Viper_P2_NEPCPatients.R", echo=TRUE)
warnings()
warnings()
MRs_sorted.Stouffer
rm(list=ls()) # cleans workspace
#.rs.restartR() # restart memory to free RAM
gc()
cat("\014")
suppressWarnings(suppressMessages(library(dplyr)))
suppressWarnings(suppressMessages(library(ggplot2)))
suppressWarnings(suppressMessages(library(Seurat)))
suppressWarnings(suppressMessages(library(SeuratObject)))
#library(reticulate)
#library(anndata) #reticulate::install_miniconda(); anndata::install_anndata()
suppressWarnings(suppressMessages(library(Matrix)))
suppressWarnings(suppressMessages(library(SparseM)))
suppressWarnings(suppressMessages(library(tidyverse)))
suppressWarnings(suppressMessages(library(cowplot)))
suppressWarnings(suppressMessages(library(purrr)))
suppressWarnings(suppressMessages(library(PISCES)))
#suppressWarnings(suppressMessages(library(readxl)))
suppressWarnings(suppressMessages(library(data.table)))
suppressWarnings(suppressMessages(library(silhClust)))
suppressWarnings(suppressMessages(library(viper)))
suppressWarnings(suppressMessages(library(pheatmap)))
suppressWarnings(suppressMessages(library(optparse)))
# Settings
{
res.val <- 300
plt.size <- 2*1080 # width, height
Computer <- "iMac" #Dell_Xps15" # "iMac # "CentOS"
switch(Computer,
"Dell_Xps15"={
CodesFolder <- paste0("/Users/",Sys.info()[["user"]],"/Desktop/")
ScratchFolder <- paste0("W:/")
},
"iMac"={
CodesFolder <- paste0("/Users/",Sys.info()[["user"]],"/Desktop/")
ScratchFolder <- paste0("/Volumes/lz2841-2/")
},
"CentOS"={
# optparse
option_list = list(
make_option(c("-p","--p_num"), type="character",default=NULL,
help="patient number (p_num)", metavar="character")
);
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
if (is.null(opt$p_num)){
print_help(opt_parser)
stop("Provide patient number p_num for infercnv analysis.n",
call.=FALSE)
} else {
p_num <- as.integer(opt$p_num)
}
CodesFolder <- paste0("/ifs/scratch/c2b2/ac_lab/lz2841/")
ScratchFolder <- CodesFolder
}
)
source(paste0(ScratchFolder,"R_CustomFunctions/PlottingFunctions.R"))
source(paste0(ScratchFolder,"R_CustomFunctions/DataPreprocessing.R"))
source(paste0(ScratchFolder,"R_CustomFunctions/AnalysisFunctions.R"))
cat(paste0("Input parameters: \nplots resolution: ",res.val," dpi",
"\nCalculation performed on: ",Computer))
Viper_f <- paste0(ScratchFolder,"NEPCPatients/Viper_analysis/P3/")
}
# Gene regulatory networks
{
net_normal <- readRDS(file=paste0(ScratchFolder,
"NEPCPatients/ARACNe_files/P3/ARACNe_outputs_epithelial_normal/P3_epithelial_normal_TFs_coTFs_unPruned.rds"))
net_tumor <- readRDS(file=paste0(ScratchFolder,
"NEPCPatients/ARACNe_files/P3/ARACNe_outputs/P3_epithelial_tumor_TFs_coTFs_unPruned.rds"))
net_normal <- pruneRegulon(net_normal)
net_tumor <- pruneRegulon(net_tumor)
}
# Seurat Objects
{
dataDir <- paste0(ScratchFolder,"NEPCPatients/SeuratObjects/compartments_inferCNV/P3/")
Normal <- readRDS(paste0(dataDir,"P3_epithelial_normal.rds"))
Tumor <- readRDS(paste0(dataDir,"P3_epithelial_tumor.rds"))
counts <- cbind(Normal[["RNA"]]@counts, Tumor[["RNA"]]@counts)
mdata_n <- Normal@meta.data %>%
dplyr::select("tumor_prediction")
mdata_t <- Tumor@meta.data %>%
dplyr::select("tumor_prediction")
mdata <- rbind(mdata_n,
mdata_t)
Epithelial <- CreateSeuratObject(counts=counts,
project="P3",
assay="Viper",
meta.data=mdata
)
# LogNormalization
Epithelial <- NormalizeData(object=Epithelial,
normalization.method="LogNormalize",
scale.factor=1e4)
# Ges
Epithelial[["Viper"]]@misc$ges <- standardize(X=as.matrix(Epithelial[["Viper"]]@data), reference="internal")
# Viper analysis
Epithelial[["Viper"]]@misc$nes <- viper(eset=Epithelial[["Viper"]]@misc$ges,
regulon=list(net_normal,net_tumor), method="none")
Epithelial[["Viper"]]@scale.data <- standardize(Epithelial[["Viper"]]@misc$nes)
MR_list <- rownames(Epithelial[["Viper"]]@scale.data)
# Stouffer Integration
nes_m <- Epithelial[["Viper"]]@misc$nes
cat("Stouffer integration on NES.\n")
viper_m <- Epithelial[["Viper"]]@misc$nes
viper_m.Stouffer <- doStoufferFromClusters(mat=viper_m,clusters=as.factor(Epithelial$tumor_prediction))
# mdata is either pred_normal or pred_tumor
MRs_sorted.Stouffer <- apply(viper_m.Stouffer,2,
function(x){
x <- x %>%
as.data.frame() %>%
arrange(.,desc(.)) %>%
rename_at(1,~"Stouffer") %>%
rownames_to_column(.,"MR")}
)
MRs_sorted.Stouffer <- do.call(cbind.data.frame, MRs_sorted.Stouffer)
n_top <- 10
per.group10_MRs <- Reduce( union , apply( viper_m.Stouffer, 2,
function(x) { x <- sort(abs(x),decreasing = T) ; names(c(head(x,n_top))) } ) )
}
MRs_sorted.Stouffer
per.group10_MRs <- Reduce(union, apply(viper_m.Stouffer, 2,
function(x) {  x <- sort(x,decreasing = T) ; c(  names(c(head(x,n_top))), names(c(tail(x,n_top))))   }  ) )
per.group10_MRs
per.group20_MRs <- sort(viper_m.Stouffer,decreasing=T)
per.group20_MRs <- c(head(names(per.group20_MRs),n_top), tail(names(per.group20_MRs),n_top))
per.group20_MRs
n_top <- 5
per.group10_MRs <- Reduce(union, apply(viper_m.Stouffer, 2,
function(x) {  x <- sort(x,decreasing = T) ; c(  names(c(head(x,n_top))), names(c(tail(x,n_top))))   }  ) )
per.group10_MRs
per.group10_MRs <- Reduce(union, apply(viper_m.Stouffer, 2,
function(x) {  x <- sort(x,decreasing = T) ; c(  names(c(head(x,n_top))), names(c(tail(x,n_top))))   }  ) )
per.group10_MRs
library(RColorBrewer)
theCols <- rev(brewer.pal(n = 8, name = "RdBu"))
theCols <- colorRampPalette(theCols)(100)
cell.ids <- mdata$tumor_prediction
annot.df <-   c(rep("pred_normal",ncol(Normal)),
rep("pred_tumor",ncol(Tumor))) %>%
as.data.frame()
names(annot.df) <- "State"
rownames(annot.df) <- c(colnames(Normal),colnames(Tumor))
clust.colors <- c("#32CD32","#7F00FF") # colors for each cell type
names(clust.colors) <- as.factor(c("pred_normal", "pred_tumor"))
annot.color <- list(State=clust.colors)
dd <- cor(viper_m[per.group10_MRs,],method="pearson")
theBreaks <- seq(-1,1,length.out=length(theCols)+1)
plot.name <- paste0(Viper_f,"/P3_heatmapMRs_cells_epithelial.tiff")
pMRs_cells <- pheatmap::pheatmap(dd,
color=theCols,
main="Cells similarity (top 10 MRs)",
treeheight_row = 0, # no dendrogram along rows
treeheight_col = 0, # no dendrogram along cols
annotation_col= annot.df,
annotation_row = annot.df,
annotation_colors= annot.color,
show_rownames = FALSE, # remove cell names rows
show_colnames = FALSE, # remove cell names cols
#show_rownames=TRUE, # when it comes to plot MRs
cluster_rows=FALSE,
cluster_cols=FALSE,
fontsize=18,
symm=TRUE,
breaks=theBreaks, # keep it a square matrix
#filename=plot.name, # save heatmap
#width=plt.size,
#height=plt.size
)
save_pheatmap_tiff(pMRs_cells,plot.name,width=plt.size,height=plt.size)
# Heatmap Master regulators
plt.x <- viper_m[per.group10_MRs,]
theBreaks <- max(abs(plt.x))
theBreaks <- seq(-theBreaks, theBreaks, length.out=length(theCols)+1)
pMRs_MRs <- pheatmap::pheatmap(plt.x,
color=theCols,
main="Patient 3: Master Regulators",
treeheight_row = 0, # no dendrogram along rows
treeheight_col = 0, # no dendrogram along cols
annotation_col = annot.df,
annotation_colors = annot.color,
show_rownames = TRUE,
show_colnames = FALSE, # remove cell names cols
cluster_rows=FALSE,
cluster_cols=FALSE,
fontsize=18,
breaks=theBreaks
#filename=plot.name,
#width=plt.size
)
PG_10 <- apply(viper_m.Stouffer, 2,
function(x) {  x <- sort(x,decreasing = T) ; c(  names(c(head(x,n_top))), names(c(tail(x,n_top))))   }  )
PG_10
combine(PG_10)
union(PG_10)
Reduce(union,PG_10))
Reduce(union,PG_10)
dim(Epithalial)
dim(Epithelial)
source("~/Desktop/NEPC_PatientsCodes/Viper_P4_NEPCPatients.R", echo=TRUE)
pergroup <- apply(viper_m.Stouffer, 2,
function(x) {
x <- sort(x,decreasing = T); c(  names(c(head(x,n_top))), names(c(tail(x,n_top)))) }  )
pergroup
source("~/Desktop/NEPC_PatientsCodes/Viper_P4_NEPCPatients.R", echo=TRUE)
source("~/Desktop/NEPC_PatientsCodes/Viper_P5_NEPCPatients.R", echo=TRUE)
warnings()
source("~/Desktop/NEPC_PatientsCodes/Viper_P5_NEPCPatients.R", echo=TRUE)
source("~/Desktop/NEPC_PatientsCodes/Viper_P6_NEPCPatients.R", echo=TRUE)
source("~/Desktop/NEPC_PatientsCodes/Viper_P6_NEPCPatients.R", echo=TRUE)
warnings()
Viper_f
objs_list
# Seurat Objects
dataDir <- paste0(ScratchFolder,"NEPCPatients/SeuratObjects/compartments_inferCNV/P5/")
dataDir
# Seurat Objects
dataDir <- paste0(ScratchFolder,"NEPCPatients/SeuratObjects/compartments_inferCNV/P6/")
dataDir
objs_names <- list.files(dataDir)
objs_names
objs_names <- objs_names[!objs_names=="P6_epithelial cell.rds" & !objs_names=="P6_epithelial cell_T_vs_Norm.rds"] # epithelial tumor and normal
objs_names
objs_list
source("~/Desktop/NEPC_PatientsCodes/Viper_P5_NEPCPatients.R", echo=TRUE)
source("~/Desktop/NEPC_PatientsCodes/Viper_P5_NEPCPatients.R", echo=TRUE)
warnings()
objs_list
Idents(allCompartments)
source("~/Desktop/NEPC_PatientsCodes/Viper_P5_NEPCPatients.R", echo=TRUE)
source("~/Desktop/NEPC_PatientsCodes/Viper_P5_NEPCPatients.R", echo=TRUE)
help("SAClustering")
source("~/Desktop/NEPC_PatientsCodes/Viper_P6_NEPCPatients.R", echo=TRUE)
warnings()
help(silhouette)
data(ruspini)
pr4 <- pam(ruspini, 4)
str(si <- silhouette(pr4))
(ssi <- summary(si))
plot(si) # silhouette plot
plot(si, col = c("red", "green", "blue", "purple"))# with cluster-wise coloring
si2 <- silhouette(pr4$clustering, dist(ruspini, "canberra"))
summary(si2) # has small values: "canberra"'s fault
plot(si2, nmax= 80, cex.names=0.6)
data(ruspini)
source("~/Desktop/test_SA_opt.R", echo=TRUE)
clustering_solution
clustering_solution[["RNA"]]@misc
clustering_solution[["RNA"]]@misc$sil
clustering_solution[["RNA"]]@misc$sil -> s
s
clustering_solution[["RNA"]]@misc$sil -> sil
sil_neg <- sapply( levels(sil$cluster) , function(i) sum( sil$sil_width[ sil$cluster == i ] < 0.25 ) )
sil
s$cluster
devtools::document()
devtools::documentation()
devtools::document()
setwd("..")
devtools::document()
devtools::document()
devtools::document()
clustering_solution <- SAClustering(S.obj=S.obj,
assay="RNA",
control=control,
verbose=TRUE,
optimize.pcs=FALSE)
devtools::document()
devtools::documents()
devtools::document()
devtools::documentation()
devtools::document()
ls()
devtools::build()
