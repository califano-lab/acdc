devtools::documents()
devtools::document()
help(SilhouetteAnalyssis)
help(SilhouetteAnalysis)
help(max)
help(SilhouetteAnalysis)
library(silhClust)
?SilhouetteAnalysis
help(silhClust)
??silhClust
help(max)
help(SilhouetteAnalysis)
help(max)
help(SilhouetteAnalysis)
help(max)
help(SilhouetteAnalysis)
source("C:/Users/zaneluc15010/Desktop/silhClust/R/SilhouetteAnalysis.R", encoding = 'UTF-8')
help(SilhouetteAnalysis)
help(SilhouetteAnalysis)
source("C:/Users/zaneluc15010/Desktop/silhClust/R/SilhouetteAnalysis.R", encoding = 'UTF-8')
help(SilhouetteAnalysis)
devtools::document()
rm(list = c("SilhouetteAnalysis"))
devtools::document()
help(SilhouetteAnalysis)
help(max)
devtools::document()
help(SilhouetteAnalysis)
devtools::document()
help(SilhouetteAnalysis)
getwd()
setwd("..")
setwd("miceCodes")
gc()
rm(list=ls())
.rs.restartR()
cells_test <- readRDS("../mice_data/SeuratObjects/M2822_RB_8w.rds")
library(silhClust)
help(.libPaths)
setwd("..")
setwd("silhClust/")
install.packages(devtools)
library(devtools)
build()
open("DESCRIPTION")
build()
build()
devtools::document()
build()
build()
build()
install()
install()
ls()
getwd()
setwd("..")
setwd("miceCodes")
ls()
getwd()
library(silhClust)
help("SilhouetteAnalysis")
print(sessionInfo())
print(sessionInfo())
help(devtools::install)
help(install)
getwd()
cells_test@assays
library(Seurat)
cells_test@assays
debug(SilhouetteAnalysis)
help("SilhouetteAnalysis")
lirary(silhClust)
library(silhClust)
help("SilhouetteAnalysis")
help("SilhouetteAnalysis")
help("SilhouetteAnalysis")
devtools::document()
getwd()
help("SilhouetteAnalysis")
library(silhClust)
help("SilhouetteAnalysis")
library(silhClust)
help("SilhouetteAnalysis")
detach("silhClust")
library(silhClust)
help(detach)
detach("silhClust")
detach("silhClust", unload=TRUE)
detach("package:silhClust", unload = TRUE)
library(silhClust)
help("SilhouetteAnalysis")
build()
devtools
library(devtools)
build()
install()
devtools::document()
devtools::document()
devtools::document()
build()
install()
build()
library(devtools)
build()
install()
open(SilhouetteAnalysis)
library(devtools)
devtools::document()
build()
install()
open(GridSearch)
open("GridSearch")
help(GridSearch)
help(readRDS)
help("assign")
help(readRDS)
devtools::document()
build()
install()
list.files()
lsf:str("package:silhClust")
lsf.str("package:silhClust")
ls("package:silhClust")
devtools::document()
build()
install()
devtools::document()
devtools::document()
build()
library(devtools)
build()
install()
devtools::document()
biuld()
build()
install()
n_cores <- parallel::detectCores()-free.cores
n_cores <- parallel::detectCores()-free.cores
myCluster <- parallel::makeCluster(n_cores,type = clust.type)
doParallel::registerDoParallel(myCluster)
myCluster <- parallel::makeCluster(n_cores,type = clust.type)
if (Sys.info()['sysname'] == "Windows"){
clust.type <- "PSOCK"
} else if ( (Sys.info()['sysname'] == "Linux") | (Sys.info()['sysname'] == "Darwin") ) {
clust.type <- "FORK"
}
n_cores <- parallel::detectCores()-free.cores
myCluster <- parallel::makeCluster(n_cores,type = clust.type)
doParallel::registerDoParallel(myCluster)
setwd(paste0("/Users/",Sys.info()[["user"]],"/Desktop/NEPC_PatientsCodes"))
ObjFold <- paste0("../NEPCPatients/SeuratObjects/dimReduc/")
files <- list.files(ObjFold)
print("parameters for testing, then set actual parameters")
res <- seq(0.01,1,by = 0.5) # resolutions for Louvain algorithm
n_bootstraps <- c(1,2) # number of resamplings
kNNs <- seq(3,7,by=1)
pct <- 80 # % cells to resample
object=get(name)
name <- paste0("P",p_num)
S.obj <- readRDS(file=paste0(ObjFold,"/",k))
assign(name,S.obj)
name <- paste0("P",p_num)
p_num <- 1
name <- paste0("P",p_num)
S.obj <- readRDS(file=paste0(ObjFold,"/",k))
k = files[1]
S.obj <- readRDS(file=paste0(ObjFold,"/",k))
assign(name,S.obj)
object=get(name)
assay.name='SCT'
.resolutions=res
.bootstraps=n_bootstraps
.knns=kNNs
.pct_cells=pct
.replace=FALSE
.clust_alg="Louvain"
if (Sys.info()['sysname'] == "Windows"){
clust.type <- "PSOCK"
} else if ( (Sys.info()['sysname'] == "Linux") | (Sys.info()['sysname'] == "Darwin") ) {
clust.type <- "FORK"
}
n_cores <- parallel::detectCores()-free.cores
free.cores=2
n_cores <- parallel::detectCores()-free.cores
myCluster <- parallel::makeCluster(n_cores,type = clust.type)
doParallel::registerDoParallel(myCluster)
n_cells_to_subsample <- round(ncol(object)*.pct_cells/100)
n_cells_to_subsample
.clust_alg = switch(.clust_alg,
"Louvain"= 1,
"Louvain-mult-ref"=2,
"SLM"=3,
"Leiden"=4)
a_knn
.kkns
.knns
a_knn = .knns
a_knn
.resolutions
resolution = rep( .resolutions, length(.bootstraps) )
resolution
bootstrap = rep( .bootstraps, length(.resolutions) )
bootstrap
index <- 1:length(resolution)
index
my_sil.df <- dplyr::tibble( index = index,
bootstrap = bootstrap, knn = 0, resolution = resolution,
tot_sil_neg = 0, lowest_sil_clust = 0, max_sil_clust = 0,
sil_avg = 0, sil_mean_median = 0, n_clust = 0, random.seed = 0 )
my_sil.df
knn = rep( .knns , length(.bootstraps) )
knn
bootstrap = rep( .bootstraps, length(.knns) )
bootstrap
resolution = rep( .resolutions, max(length(c(.bootstraps,.knns))) )
resolution
bootstrap = rep( .bootstraps, max(length(c(.bootstraps,.knns))) )
bootstrap
length(resolution)
length(bootstrap)
index <- 1:length(resolution)
inde
index
length(index)
my_sil.df <- dplyr::tibble( index = index,
bootstrap = bootstrap, knn = 0, resolution = resolution,
tot_sil_neg = 0, lowest_sil_clust = 0, max_sil_clust = 0,
sil_avg = 0, sil_mean_median = 0, n_clust = 0, random.seed = 0 )
my_sil.df
nrow(my_sil.df)
selected_samples <- sample(colnames(object),size=n_cells_to_subsample,replace=.replace)
selected_samples
x <- object[ , colnames(object) %in% selected_samples ]
x
# x.dist <- as.matrix(vpdist)[selected_samples,selected_samples]
# x.dist <- as.matrix(as.dist( 1-cor( x@assays$VIPER@scale.data ,
#                                     method = “spe” )))
# x.dist <- as.dist(viperSimilarity(x@assays$VIPER@scale.data)) %>% as.matrix()
x.dist <- as.matrix(as.dist( 1-cor( x[[assay.name]]@scale.data,method = "pea" )))
# x.dist <- as.matrix(vpdist)[selected_samples,selected_samples]
# x.dist <- as.matrix(as.dist( 1-cor( x@assays$VIPER@scale.data ,
#                                     method = “spe” )))
# x.dist <- as.dist(viperSimilarity(x@assays$VIPER@scale.data)) %>% as.matrix()
x.dist <- as.matrix(as.dist( 1-cor( x[[assay.name]]@scale.data,method = "pea" )))
my_ssn_graph <- Seurat::FindNeighbors( x.dist ,
# dims = pcs_to_use ,
# assay = “VIPER” ,
distance.matrix = TRUE ,
verbose = TRUE ,
# k.param = knn_n_neighbor ,
k.param = a_knn,
# annoy.metric = “cosine” ,
annoy.metric = "euclidean" ,
compute.SNN = TRUE )
x@graphs <- my_ssn_graph
x@graphs
my_sil.df$index
a_index=my_sil.df$index[1]
a_index
set.seed(a_index)
my_sil.df$random.seed[a_index] <- a_index
my_sil.df
print(paste0("--- Silhouette score computation resolution/bootstrap : ", a_knn , "|" , my_sil.df$resolution[a_index] ))
x <- Seurat::FindClusters( x,
graph.name = "snn",
resolution = my_sil.df$resolution[a_index],
verbose = FALSE,
modularity.fxn = 1,
algorithm = .clust_alg,
random.seed = my_seed
)
my_seed = 0
x <- Seurat::FindClusters( x,
graph.name = "snn",
resolution = my_sil.df$resolution[a_index],
verbose = FALSE,
modularity.fxn = 1,
algorithm = .clust_alg,
random.seed = my_seed
)
table(x$seurat_clusters)
if ( nlevels(x$seurat_clusters) == 1 ) next ;
s <- cluster::silhouette( as.integer(x$seurat_clusters) , x.dist )
# pdf( file.path(reports.dir,paste0(“sil-res-“,a_res,“.pdf”)) )
x <- factoextra::fviz_silhouette(s,print.summary = FALSE)
y <- sapply( levels(x$data$cluster) , function(i) mean( x$data$sil_width[ x$data$cluster == i ] ) )
z <- sapply( levels(x$data$cluster) , function(i) median( x$data$sil_width[ x$data$cluster == i ] ) )
tot_sil_neg <- sapply( levels(x$data$cluster) , function(i) sum( x$data$sil_width[ x$data$cluster == i ] < 0.25 ) )
my_sil.df$sil_avg[ a_index ] = mean(y)
my_sil.df$sil_mean_median[ a_index ] = mean(z)
my_sil.df$tot_sil_neg[ a_index ] = sum(tot_sil_neg)
my_sil.df$lowest_sil_clust[ a_index ] = min(y)
my_sil.df$max_sil_clust[a_index] = max(y)
my_sil.df$n_clust[ a_index ] = nlevels(x$data$cluster)
# dev.off()
# View(my_sil.df)
}
devtools::document()
getwd()
setwd("../silhClust")
devtools::document()
build()
install()
build()
install()
c(.bootstraps,.knns)
c(.bootstraps,.knns)
c(.bootstraps,.knns)
index
my_sil.df
resolution = rep( .resolutions, length(.knns) )
resolution
.knns
length(resolutions)
length(resolution)
bootstrap = rep( .bootstraps, length(.knns) )
index <- 1:length(resolution)
index
bootstrap
resolution
bootstrap
index
my_sil.df <- dplyr::tibble( index = index,
bootstrap = bootstrap, knn = 0, resolution = resolution,
tot_sil_neg = 0, lowest_sil_clust = 0, max_sil_clust = 0,
sil_avg = 0, sil_mean_median = 0, n_clust = 0, random.seed = 0 )
my_sil.df
nrow(my_sil.df)
selected_samples <- sample(colnames(object),size=n_cells_to_subsample,replace=.replace)
x <- object[ , colnames(object) %in% selected_samples ]
x
# x.dist <- as.matrix(vpdist)[selected_samples,selected_samples]
# x.dist <- as.matrix(as.dist( 1-cor( x@assays$VIPER@scale.data ,
#                                     method = “spe” )))
# x.dist <- as.dist(viperSimilarity(x@assays$VIPER@scale.data)) %>% as.matrix()
x.dist <- as.matrix(as.dist( 1-cor( x[[assay.name]]@scale.data,method = "pea" )))
x.dist
my_ssn_graph <- Seurat::FindNeighbors( x.dist,
# dims = pcs_to_use,
# assay = “VIPER”,
distance.matrix = TRUE,
verbose = TRUE,
# k.param = knn_n_neighbor,
k.param = a_knn,
# annoy.metric = “cosine”,
annoy.metric = "euclidean",
compute.SNN = TRUE )
x@graphs <- my_ssn_graph
a_index = my_sil.df$index
set.seed(a_index)
my_sil.df$random.seed[a_index] <- a_index
print(paste0("--- Silhouette score computation knn/bootstrap : ", a_knn , "|" , my_sil.df$bootstrap[a_index] ))
a_knn
.knns
set.seed(a_index)
my_sil.df$random.seed[a_index] <- a_index
print(paste0("--- Silhouette score computation knn/bootstrap : ", a_knn , "|" , my_sil.df$bootstrap[a_index] ))
x <- Seurat::FindClusters( x,
graph.name = "snn",
resolution = my_sil.df$resolution[a_index],
verbose = FALSE,
modularity.fxn = 1,
algorithm = .clust_alg,
random.seed = my_seed
)
table(x$seurat_clusters)
if ( nlevels(x$seurat_clusters) == 1 ) next ;
s <- cluster::silhouette( as.integer(x$seurat_clusters) , x.dist )
# pdf( file.path(reports.dir,paste0(“sil-res-“,a_res,“.pdf”)) )
x <- factoextra::fviz_silhouette(s,print.summary = FALSE)
y <- sapply( levels(x$data$cluster) , function(i) mean( x$data$sil_width[ x$data$cluster == i ] ) )
z <- sapply( levels(x$data$cluster) , function(i) median( x$data$sil_width[ x$data$cluster == i ] ) )
tot_sil_neg <- sapply( levels(x$data$cluster) , function(i) sum( x$data$sil_width[ x$data$cluster == i ] < 0.25 ) )
my_sil.df$sil_avg[ a_index ] = mean(y)
my_sil.df$sil_mean_median[ a_index ] = mean(z)
my_sil.df$tot_sil_neg[ a_index ] = sum(tot_sil_neg)
my_sil.df$lowest_sil_clust[ a_index ] = min(y)
my_sil.df$max_sil_clust[a_index] = max(y)
my_sil.df$n_clust[ a_index ] = nlevels(x$data$cluster)
# dev.off()
# View(my_sil.df)
}
devtools::document()
build()
install()
if (Sys.info()['sysname'] == "Windows"){
clust.type <- "PSOCK"
} else if ( (Sys.info()['sysname'] == "Linux") | (Sys.info()['sysname'] == "Darwin") ) {
clust.type <- "FORK"
}
n_cores <- parallel::detectCores()-free.cores
myCluster <- parallel::makeCluster(n_cores,type = clust.type)
doParallel::registerDoParallel(myCluster)
n_cells_to_subsample <- round(ncol(object)*.pct_cells/100)
n_cells_to_subsample
.clust_alg = switch(.clust_alg,
"Louvain"= 1,
"Louvain-mult-ref"=2,
"SLM"=3,
"Leiden"=4)
print(system.time({
result <- foreach::foreach( a_knn = .knns, .combine = 'rbind' ) %dopar% {
resolution = rep( .resolutions, length(.knns) )
bootstrap = rep( .bootstraps, length(.knns) )
index <- 1:length(resolution)
my_sil.df <- dplyr::tibble( index = index,
bootstrap = bootstrap, knn = 0, resolution = resolution,
tot_sil_neg = 0, lowest_sil_clust = 0, max_sil_clust = 0,
sil_avg = 0, sil_mean_median = 0, n_clust = 0, random.seed = 0 )
nrow(my_sil.df)
selected_samples <- sample(colnames(object),size=n_cells_to_subsample,replace=.replace)
x <- object[ , colnames(object) %in% selected_samples ]
# x.dist <- as.matrix(vpdist)[selected_samples,selected_samples]
# x.dist <- as.matrix(as.dist( 1-cor( x@assays$VIPER@scale.data ,
#                                     method = “spe” )))
# x.dist <- as.dist(viperSimilarity(x@assays$VIPER@scale.data)) %>% as.matrix()
x.dist <- as.matrix(as.dist( 1-cor( x[[assay.name]]@scale.data,method = "pea" )))
my_ssn_graph <- Seurat::FindNeighbors( x.dist,
# dims = pcs_to_use,
# assay = “VIPER”,
distance.matrix = TRUE,
verbose = TRUE,
# k.param = knn_n_neighbor,
k.param = a_knn,
# annoy.metric = “cosine”,
annoy.metric = "euclidean",
compute.SNN = TRUE )
x@graphs <- my_ssn_graph
for ( a_index in my_sil.df$index )
{
set.seed(a_index)
my_sil.df$random.seed[a_index] <- a_index
print(paste0("--- Silhouette score computation knn/bootstrap : ", a_knn , "|" , my_sil.df$bootstrap[a_index] ))
x <- Seurat::FindClusters( x,
graph.name = "snn",
resolution = my_sil.df$resolution[a_index],
verbose = FALSE,
modularity.fxn = 1,
algorithm = .clust_alg,
random.seed = my_seed
)
table(x$seurat_clusters)
if ( nlevels(x$seurat_clusters) == 1 ) next ;
s <- cluster::silhouette( as.integer(x$seurat_clusters) , x.dist )
# pdf( file.path(reports.dir,paste0(“sil-res-“,a_res,“.pdf”)) )
x <- factoextra::fviz_silhouette(s,print.summary = FALSE)
y <- sapply( levels(x$data$cluster) , function(i) mean( x$data$sil_width[ x$data$cluster == i ] ) )
z <- sapply( levels(x$data$cluster) , function(i) median( x$data$sil_width[ x$data$cluster == i ] ) )
tot_sil_neg <- sapply( levels(x$data$cluster) , function(i) sum( x$data$sil_width[ x$data$cluster == i ] < 0.25 ) )
my_sil.df$sil_avg[ a_index ] = mean(y)
my_sil.df$sil_mean_median[ a_index ] = mean(z)
my_sil.df$tot_sil_neg[ a_index ] = sum(tot_sil_neg)
my_sil.df$lowest_sil_clust[ a_index ] = min(y)
my_sil.df$max_sil_clust[a_index] = max(y)
my_sil.df$n_clust[ a_index ] = nlevels(x$data$cluster)
# dev.off()
# View(my_sil.df)
}
my_sil.df$knn = a_knn
return(my_sil.df)
} # End of dopar
})) # End of print
resolution = rep( .resolutions, length(.knns) )
resolution
bootstrap = rep( .bootstraps, length(.knns) )
bootstrap
index <- 1:length(resolution)
my_sil.df <- dplyr::tibble( index = index,
bootstrap = bootstrap, knn = 0, resolution = resolution,
tot_sil_neg = 0, lowest_sil_clust = 0, max_sil_clust = 0,
sil_avg = 0, sil_mean_median = 0, n_clust = 0, random.seed = 0 )
my_sil.df
my_dil.df
my_sil.df
knn
devtools::package()
devtools::document()
build()
install()
View(x)
devtools::document()
build()
library(devtools)
build()
install()
library(devtools)
devtools::document()
build()
install()
