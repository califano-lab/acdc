# result <- foreach::foreach( a_knn = .knns, .combine = 'rbind' ) %dopar% {
for (a_knn in .knns){
resolution = rep( .resolutions, length(.bootstraps) )
bootstrap = rep( .bootstraps, length(.resolutions) )
index <- 1:length(resolution)
my_sil.df <- dplyr::tibble( index = index,
bootstrap = bootstrap, knn = 0, resolution = resolution,
tot_sil_neg = 0, lowest_sil_clust = 0, max_sil_clust = 0,
sil_avg = 0, sil_mean_median = 0, n_clust = 0, random.seed = 0 )
nrow(my_sil.df)
selected_samples <- sample(colnames(object),size=n_cells_to_subsample,replace=.replace)
x <- object[ , colnames(object) %in% selected_samples ]
# x.dist <- as.matrix(vpdist)[selected_samples,selected_samples]
# x.dist <- as.matrix(as.dist( 1-cor( x@assays$VIPER@scale.data ,
#                                     method = “spe” )))
# x.dist <- as.dist(viperSimilarity(x@assays$VIPER@scale.data)) %>% as.matrix()
x.dist <- as.matrix(as.dist( 1-cor( x[[assay.name]]@scale.data,method = "pea" )))
my_ssn_graph <- Seurat::FindNeighbors( x.dist,
# dims = pcs_to_use,
# assay = “VIPER”,
distance.matrix = TRUE,
verbose = TRUE,
# k.param = knn_n_neighbor,
k.param = a_knn,
# annoy.metric = “cosine”,
annoy.metric = "euclidean",
compute.SNN = TRUE )
x@graphs <- my_ssn_graph
for ( a_index in my_sil.df$index )
{
set.seed(a_index)
my_sil.df$random.seed[a_index] <- a_index
print(paste0("--- Silhouette score computation knn/bootstrap : ", a_knn , "|" , my_sil.df$bootstrap[a_index] ))
x <- Seurat::FindClusters( x,
graph.name = "snn",
resolution = my_sil.df$resolution[a_index],
verbose = FALSE,
modularity.fxn = 1,
algorithm = .clust_alg,
random.seed = my_seed
)
table(x$seurat_clusters)
if ( nlevels(x$seurat_clusters) == 1 ) next ;
s <- cluster::silhouette( as.integer(x$seurat_clusters) , x.dist )
# pdf( file.path(reports.dir,paste0(“sil-res-“,a_res,“.pdf”)) )
x <- factoextra::fviz_silhouette(s,print.summary = FALSE)
y <- sapply( levels(x$data$cluster) , function(i) mean( x$data$sil_width[ x$data$cluster == i ] ) )
z <- sapply( levels(x$data$cluster) , function(i) median( x$data$sil_width[ x$data$cluster == i ] ) )
tot_sil_neg <- sapply( levels(x$data$cluster) , function(i) sum( x$data$sil_width[ x$data$cluster == i ] < 0.25 ) )
my_sil.df$sil_avg[ a_index ] = mean(y)
my_sil.df$sil_mean_median[ a_index ] = mean(z)
my_sil.df$tot_sil_neg[ a_index ] = sum(tot_sil_neg)
my_sil.df$lowest_sil_clust[ a_index ] = min(y)
my_sil.df$max_sil_clust[a_index] = max(y)
my_sil.df$n_clust[ a_index ] = nlevels(x$data$cluster)
# dev.off()
# View(my_sil.df)
}
my_sil.df$knn = a_knn
return(my_sil.df)
} # End of dopar
})) # End of print
## Grid Search ----
print("Selection of parameters for optimal clustering solution")
object=P1
assay.name='SCT'
.resolutions <- seq(0.01,1,by = 0.5) # resolutions for Louvain algorithm
.bootstraps <- c(1,2) # number of resamplings
.knns <- seq(3,7,by=2)
.pct_cells <- 80 # % cells to resample
free.cores=2
.replace=FALSE
my_seed=0
n_cells_to_subsample <- round(ncol(object)*.pct_cells/100)
n_cells_to_subsample
print(system.time({
# result <- foreach::foreach( a_knn = .knns, .combine = 'rbind' ) %dopar% {
for (a_knn in .knns){
resolution = rep( .resolutions, length(.bootstraps) )
bootstrap = rep( .bootstraps, length(.resolutions) )
index <- 1:length(resolution)
my_sil.df <- dplyr::tibble( index = index,
bootstrap = bootstrap, knn = 0, resolution = resolution,
tot_sil_neg = 0, lowest_sil_clust = 0, max_sil_clust = 0,
sil_avg = 0, sil_mean_median = 0, n_clust = 0, random.seed = 0 )
nrow(my_sil.df)
selected_samples <- sample(colnames(object),size=n_cells_to_subsample,replace=.replace)
x <- object[ , colnames(object) %in% selected_samples ]
# x.dist <- as.matrix(vpdist)[selected_samples,selected_samples]
# x.dist <- as.matrix(as.dist( 1-cor( x@assays$VIPER@scale.data ,
#                                     method = “spe” )))
# x.dist <- as.dist(viperSimilarity(x@assays$VIPER@scale.data)) %>% as.matrix()
x.dist <- as.matrix(as.dist( 1-cor( x[[assay.name]]@scale.data,method = "pea" )))
my_ssn_graph <- Seurat::FindNeighbors( x.dist,
# dims = pcs_to_use,
# assay = “VIPER”,
distance.matrix = TRUE,
verbose = TRUE,
# k.param = knn_n_neighbor,
k.param = a_knn,
# annoy.metric = “cosine”,
annoy.metric = "euclidean",
compute.SNN = TRUE )
x@graphs <- my_ssn_graph
for ( a_index in my_sil.df$index )
{
set.seed(a_index)
my_sil.df$random.seed[a_index] <- a_index
print(paste0("--- Silhouette score computation knn/bootstrap : ", a_knn , "|" , my_sil.df$bootstrap[a_index] ))
x <- Seurat::FindClusters( x,
graph.name = "snn",
resolution = my_sil.df$resolution[a_index],
verbose = FALSE,
modularity.fxn = 1,
algorithm = .clust_alg,
random.seed = my_seed
)
table(x$seurat_clusters)
if ( nlevels(x$seurat_clusters) == 1 ) next ;
s <- cluster::silhouette( as.integer(x$seurat_clusters) , x.dist )
# pdf( file.path(reports.dir,paste0(“sil-res-“,a_res,“.pdf”)) )
x <- factoextra::fviz_silhouette(s,print.summary = FALSE)
y <- sapply( levels(x$data$cluster) , function(i) mean( x$data$sil_width[ x$data$cluster == i ] ) )
z <- sapply( levels(x$data$cluster) , function(i) median( x$data$sil_width[ x$data$cluster == i ] ) )
tot_sil_neg <- sapply( levels(x$data$cluster) , function(i) sum( x$data$sil_width[ x$data$cluster == i ] < 0.25 ) )
my_sil.df$sil_avg[ a_index ] = mean(y)
my_sil.df$sil_mean_median[ a_index ] = mean(z)
my_sil.df$tot_sil_neg[ a_index ] = sum(tot_sil_neg)
my_sil.df$lowest_sil_clust[ a_index ] = min(y)
my_sil.df$max_sil_clust[a_index] = max(y)
my_sil.df$n_clust[ a_index ] = nlevels(x$data$cluster)
# dev.off()
# View(my_sil.df)
}
my_sil.df$knn = a_knn
return(my_sil.df)
} # End of dopar
})) # End of print
## Grid Search ----
print("Selection of parameters for optimal clustering solution")
object=P1
assay.name='SCT'
.resolutions <- seq(0.01,1,by = 0.5) # resolutions for Louvain algorithm
.bootstraps <- c(1,2) # number of resamplings
.knns <- seq(3,7,by=2)
.pct_cells <- 80 # % cells to resample
.clust_alg="Louvain"
free.cores=2
.replace=FALSE
my_seed=0
n_cells_to_subsample <- round(ncol(object)*.pct_cells/100)
n_cells_to_subsample
print(system.time({
# result <- foreach::foreach( a_knn = .knns, .combine = 'rbind' ) %dopar% {
for (a_knn in .knns){
resolution = rep( .resolutions, length(.bootstraps) )
bootstrap = rep( .bootstraps, length(.resolutions) )
index <- 1:length(resolution)
my_sil.df <- dplyr::tibble( index = index,
bootstrap = bootstrap, knn = 0, resolution = resolution,
tot_sil_neg = 0, lowest_sil_clust = 0, max_sil_clust = 0,
sil_avg = 0, sil_mean_median = 0, n_clust = 0, random.seed = 0 )
nrow(my_sil.df)
selected_samples <- sample(colnames(object),size=n_cells_to_subsample,replace=.replace)
x <- object[ , colnames(object) %in% selected_samples ]
# x.dist <- as.matrix(vpdist)[selected_samples,selected_samples]
# x.dist <- as.matrix(as.dist( 1-cor( x@assays$VIPER@scale.data ,
#                                     method = “spe” )))
# x.dist <- as.dist(viperSimilarity(x@assays$VIPER@scale.data)) %>% as.matrix()
x.dist <- as.matrix(as.dist( 1-cor( x[[assay.name]]@scale.data,method = "pea" )))
my_ssn_graph <- Seurat::FindNeighbors( x.dist,
# dims = pcs_to_use,
# assay = “VIPER”,
distance.matrix = TRUE,
verbose = TRUE,
# k.param = knn_n_neighbor,
k.param = a_knn,
# annoy.metric = “cosine”,
annoy.metric = "euclidean",
compute.SNN = TRUE )
x@graphs <- my_ssn_graph
for ( a_index in my_sil.df$index )
{
set.seed(a_index)
my_sil.df$random.seed[a_index] <- a_index
print(paste0("--- Silhouette score computation knn/bootstrap : ", a_knn , "|" , my_sil.df$bootstrap[a_index] ))
x <- Seurat::FindClusters( x,
graph.name = "snn",
resolution = my_sil.df$resolution[a_index],
verbose = FALSE,
modularity.fxn = 1,
algorithm = .clust_alg,
random.seed = my_seed
)
table(x$seurat_clusters)
if ( nlevels(x$seurat_clusters) == 1 ) next ;
s <- cluster::silhouette( as.integer(x$seurat_clusters) , x.dist )
# pdf( file.path(reports.dir,paste0(“sil-res-“,a_res,“.pdf”)) )
x <- factoextra::fviz_silhouette(s,print.summary = FALSE)
y <- sapply( levels(x$data$cluster) , function(i) mean( x$data$sil_width[ x$data$cluster == i ] ) )
z <- sapply( levels(x$data$cluster) , function(i) median( x$data$sil_width[ x$data$cluster == i ] ) )
tot_sil_neg <- sapply( levels(x$data$cluster) , function(i) sum( x$data$sil_width[ x$data$cluster == i ] < 0.25 ) )
my_sil.df$sil_avg[ a_index ] = mean(y)
my_sil.df$sil_mean_median[ a_index ] = mean(z)
my_sil.df$tot_sil_neg[ a_index ] = sum(tot_sil_neg)
my_sil.df$lowest_sil_clust[ a_index ] = min(y)
my_sil.df$max_sil_clust[a_index] = max(y)
my_sil.df$n_clust[ a_index ] = nlevels(x$data$cluster)
# dev.off()
# View(my_sil.df)
}
my_sil.df$knn = a_knn
return(my_sil.df)
} # End of dopar
})) # End of print
my_sil.df$resolution[a_index]
str(object,1)
x
class(x)
a_knn = .knns[1]
resolution = rep( .resolutions, length(.bootstraps) )
bootstrap = rep( .bootstraps, length(.resolutions) )
index <- 1:length(resolution)
my_sil.df <- dplyr::tibble( index = index,
bootstrap = bootstrap, knn = 0, resolution = resolution,
tot_sil_neg = 0, lowest_sil_clust = 0, max_sil_clust = 0,
sil_avg = 0, sil_mean_median = 0, n_clust = 0, random.seed = 0 )
nrow(my_sil.df)
selected_samples <- sample(colnames(object),size=n_cells_to_subsample,replace=.replace)
x <- object[ , colnames(object) %in% selected_samples ]
# x.dist <- as.matrix(vpdist)[selected_samples,selected_samples]
# x.dist <- as.matrix(as.dist( 1-cor( x@assays$VIPER@scale.data ,
#                                     method = “spe” )))
# x.dist <- as.dist(viperSimilarity(x@assays$VIPER@scale.data)) %>% as.matrix()
x.dist <- as.matrix(as.dist( 1-cor( x[[assay.name]]@scale.data,method = "pea" )))
my_ssn_graph <- Seurat::FindNeighbors( x.dist,
# dims = pcs_to_use,
# assay = “VIPER”,
distance.matrix = TRUE,
verbose = TRUE,
# k.param = knn_n_neighbor,
k.param = a_knn,
# annoy.metric = “cosine”,
annoy.metric = "euclidean",
compute.SNN = TRUE )
x@graphs <- my_ssn_graph
my_sil.df$index
a_index = 1
set.seed(a_index)
my_sil.df$random.seed[a_index] <- a_index
print(paste0("--- Silhouette score computation knn/bootstrap : ", a_knn , "|" , my_sil.df$bootstrap[a_index] ))
x <- Seurat::FindClusters( x,
graph.name = "snn",
resolution = my_sil.df$resolution[a_index],
verbose = FALSE,
modularity.fxn = 1,
algorithm = .clust_alg,
random.seed = my_seed
)
table(x$seurat_clusters)
if ( nlevels(x$seurat_clusters) == 1 ) next ;
s <- cluster::silhouette( as.integer(x$seurat_clusters) , x.dist )
# pdf( file.path(reports.dir,paste0(“sil-res-“,a_res,“.pdf”)) )
x <- factoextra::fviz_silhouette(s,print.summary = FALSE)
y <- sapply( levels(x$data$cluster) , function(i) mean( x$data$sil_width[ x$data$cluster == i ] ) )
z <- sapply( levels(x$data$cluster) , function(i) median( x$data$sil_width[ x$data$cluster == i ] ) )
tot_sil_neg <- sapply( levels(x$data$cluster) , function(i) sum( x$data$sil_width[ x$data$cluster == i ] < 0.25 ) )
my_sil.df$sil_avg[ a_index ] = mean(y)
my_sil.df$sil_mean_median[ a_index ] = mean(z)
my_sil.df$tot_sil_neg[ a_index ] = sum(tot_sil_neg)
my_sil.df$lowest_sil_clust[ a_index ] = min(y)
my_sil.df$max_sil_clust[a_index] = max(y)
my_sil.df$n_clust[ a_index ] = nlevels(x$data$cluster)
my_sil.df
my_sil.df$knn = a_knn
my_sil.df
a_index = 2
set.seed(a_index)
my_sil.df$random.seed[a_index] <- a_index
print(paste0("--- Silhouette score computation knn/bootstrap : ", a_knn , "|" , my_sil.df$bootstrap[a_index] ))
seurat_object <- Seurat::FindClusters( seurat_object,
graph.name = "snn",
resolution = my_sil.df$resolution[a_index],
verbose = FALSE,
modularity.fxn = 1,
algorithm = .clust_alg,
random.seed = my_seed
)
help(fviz_silhouette)
build()
install()
output_opt <- GridSearch2(object=get(name),
assay.name='SCT',
.resolutions=res,
.bootstraps=n_bootstraps,
.knns=kNNs,
.pct_cells=pct,
.replace=FALSE,
.clust_alg="Louvain")
a_knn
resolution = rep( .resolutions, length(.bootstraps) )
bootstrap = rep( .bootstraps, length(.resolutions) )
index <- 1:length(resolution)
my_sil.df <- dplyr::tibble( index = index,
bootstrap = bootstrap, knn = 0, resolution = resolution,
tot_sil_neg = 0, lowest_sil_clust = 0, max_sil_clust = 0,
sil_avg = 0, sil_mean_median = 0, n_clust = 0, random.seed = 0 )
my_sil.df
nrow(my_sil.df)
selected_samples <- sample(colnames(object),size=n_cells_to_subsample,replace=.replace)
selected_samples
seurat_obj <- object[ , colnames(object) %in% selected_samples ]
# x.dist <- as.matrix(vpdist)[selected_samples,selected_samples]
# x.dist <- as.matrix(as.dist( 1-cor( x@assays$VIPER@scale.data ,
#                                     method = “spe” )))
# x.dist <- as.dist(viperSimilarity(x@assays$VIPER@scale.data)) %>% as.matrix()
x.dist <- as.matrix(as.dist( 1-cor( seurat_obj[[assay.name]]@scale.data,method = "pea" )))
x
rm(x)
my_ssn_graph <- Seurat::FindNeighbors( x.dist,
# dims = pcs_to_use,
# assay = “VIPER”,
distance.matrix = TRUE,
verbose = TRUE,
# k.param = knn_n_neighbor,
k.param = a_knn,
# annoy.metric = “cosine”,
annoy.metric = "euclidean",
compute.SNN = TRUE )
seurat_obj@graphs <- my_ssn_graph
a_index = 1
set.seed(a_index)
my_sil.df$random.seed[a_index] <- a_index
print(paste0("--- Silhouette score computation knn/bootstrap : ", a_knn , "|" , my_sil.df$bootstrap[a_index] ))
seurat_obj <- Seurat::FindClusters( seurat_obj,
graph.name = "snn",
resolution = my_sil.df$resolution[a_index],
verbose = FALSE,
modularity.fxn = 1,
algorithm = .clust_alg,
random.seed = my_seed
)
table(x$seurat_clusters)
if ( nlevels(x$seurat_clusters) == 1 ) next ;
s <- cluster::silhouette( as.integer(x$seurat_clusters) , x.dist )
table(seurat_obj$seurat_clusters)
if ( nlevels(x$seurat_clusters) == 1 ) next ;
if ( nlevels(seurat_obj$seurat_clusters) == 1 ) next ;
s <- cluster::silhouette( as.integer(seurat_obj$seurat_clusters) , x.dist )
# pdf( file.path(reports.dir,paste0(“sil-res-“,a_res,“.pdf”)) )
x <- factoextra::fviz_silhouette(s,print.summary = FALSE)
y <- sapply( levels(x$data$cluster) , function(i) mean( x$data$sil_width[ x$data$cluster == i ] ) )
z <- sapply( levels(x$data$cluster) , function(i) median( x$data$sil_width[ x$data$cluster == i ] ) )
tot_sil_neg <- sapply( levels(x$data$cluster) , function(i) sum( x$data$sil_width[ x$data$cluster == i ] < 0.25 ) )
my_sil.df$sil_avg[ a_index ] = mean(y)
my_sil.df$sil_mean_median[ a_index ] = mean(z)
my_sil.df$tot_sil_neg[ a_index ] = sum(tot_sil_neg)
my_sil.df$lowest_sil_clust[ a_index ] = min(y)
my_sil.df$max_sil_clust[a_index] = max(y)
my_sil.df$n_clust[ a_index ] = nlevels(x$data$cluster)
a_index = 2
set.seed(a_index)
my_sil.df$random.seed[a_index] <- a_index
print(paste0("--- Silhouette score computation knn/bootstrap : ", a_knn , "|" , my_sil.df$bootstrap[a_index] ))
seurat_obj <- Seurat::FindClusters( seurat_obj,
graph.name = "snn",
resolution = my_sil.df$resolution[a_index],
verbose = FALSE,
modularity.fxn = 1,
algorithm = .clust_alg,
random.seed = my_seed
)
table(seurat_obj$seurat_clusters)
if ( nlevels(seurat_obj$seurat_clusters) == 1 ) next ;
s <- cluster::silhouette( as.integer(seurat_obj$seurat_clusters) , x.dist )
# pdf( file.path(reports.dir,paste0(“sil-res-“,a_res,“.pdf”)) )
x <- factoextra::fviz_silhouette(s,print.summary = FALSE)
y <- sapply( levels(x$data$cluster) , function(i) mean( x$data$sil_width[ x$data$cluster == i ] ) )
z <- sapply( levels(x$data$cluster) , function(i) median( x$data$sil_width[ x$data$cluster == i ] ) )
tot_sil_neg <- sapply( levels(x$data$cluster) , function(i) sum( x$data$sil_width[ x$data$cluster == i ] < 0.25 ) )
my_sil.df$sil_avg[ a_index ] = mean(y)
my_sil.df$sil_mean_median[ a_index ] = mean(z)
my_sil.df$tot_sil_neg[ a_index ] = sum(tot_sil_neg)
my_sil.df$lowest_sil_clust[ a_index ] = min(y)
my_sil.df$max_sil_clust[a_index] = max(y)
my_sil.df$n_clust[ a_index ] = nlevels(x$data$cluster)
a_index = 3
set.seed(a_index)
my_sil.df$random.seed[a_index] <- a_index
print(paste0("--- Silhouette score computation knn/bootstrap : ", a_knn , "|" , my_sil.df$bootstrap[a_index] ))
seurat_obj <- Seurat::FindClusters( seurat_obj,
graph.name = "snn",
resolution = my_sil.df$resolution[a_index],
verbose = FALSE,
modularity.fxn = 1,
algorithm = .clust_alg,
random.seed = my_seed
)
table(seurat_obj$seurat_clusters)
if ( nlevels(seurat_obj$seurat_clusters) == 1 ) next ;
s <- cluster::silhouette( as.integer(seurat_obj$seurat_clusters) , x.dist )
# pdf( file.path(reports.dir,paste0(“sil-res-“,a_res,“.pdf”)) )
x <- factoextra::fviz_silhouette(s,print.summary = FALSE)
y <- sapply( levels(x$data$cluster) , function(i) mean( x$data$sil_width[ x$data$cluster == i ] ) )
z <- sapply( levels(x$data$cluster) , function(i) median( x$data$sil_width[ x$data$cluster == i ] ) )
tot_sil_neg <- sapply( levels(x$data$cluster) , function(i) sum( x$data$sil_width[ x$data$cluster == i ] < 0.25 ) )
my_sil.df$sil_avg[ a_index ] = mean(y)
my_sil.df$sil_mean_median[ a_index ] = mean(z)
my_sil.df$tot_sil_neg[ a_index ] = sum(tot_sil_neg)
my_sil.df$lowest_sil_clust[ a_index ] = min(y)
my_sil.df$max_sil_clust[a_index] = max(y)
my_sil.df$n_clust[ a_index ] = nlevels(x$data$cluster)
a_index = 4
set.seed(a_index)
my_sil.df$random.seed[a_index] <- a_index
print(paste0("--- Silhouette score computation knn/bootstrap : ", a_knn , "|" , my_sil.df$bootstrap[a_index] ))
seurat_obj <- Seurat::FindClusters( seurat_obj,
graph.name = "snn",
resolution = my_sil.df$resolution[a_index],
verbose = FALSE,
modularity.fxn = 1,
algorithm = .clust_alg,
random.seed = my_seed
)
table(seurat_obj$seurat_clusters)
if ( nlevels(seurat_obj$seurat_clusters) == 1 ) next ;
s <- cluster::silhouette( as.integer(seurat_obj$seurat_clusters) , x.dist )
# pdf( file.path(reports.dir,paste0(“sil-res-“,a_res,“.pdf”)) )
x <- factoextra::fviz_silhouette(s,print.summary = FALSE)
y <- sapply( levels(x$data$cluster) , function(i) mean( x$data$sil_width[ x$data$cluster == i ] ) )
z <- sapply( levels(x$data$cluster) , function(i) median( x$data$sil_width[ x$data$cluster == i ] ) )
tot_sil_neg <- sapply( levels(x$data$cluster) , function(i) sum( x$data$sil_width[ x$data$cluster == i ] < 0.25 ) )
my_sil.df$sil_avg[ a_index ] = mean(y)
my_sil.df$sil_mean_median[ a_index ] = mean(z)
my_sil.df$tot_sil_neg[ a_index ] = sum(tot_sil_neg)
my_sil.df$lowest_sil_clust[ a_index ] = min(y)
my_sil.df$max_sil_clust[a_index] = max(y)
my_sil.df$n_clust[ a_index ] = nlevels(x$data$cluster)
library(silhClust)
getwd()
build()
install()
detach("package:silhClust",unload=TRUE)
library(silhClust)
output_opt <- GridSearch2(object=get(name),
assay.name='SCT',
.resolutions=res,
.bootstraps=n_bootstraps,
.knns=kNNs,
.pct_cells=pct,
.replace=FALSE,
.clust_alg="Louvain")
build()
install()
source("~/Desktop/NEPC_PatientsCodes/ClusteringOptimization_NEPCPatients.R", echo=TRUE)
output_opt
help("FindNeighbors")
help("FindNeighbors")
output_opt
stats.df <- tibble( .rows=length(unique(output_opt$index)) )
stats.df
stats.df <- output_opt %>% group_by(knn,resolution) %>% summarise(across(sil_avg, list(avg=mean,sd=sd), na.rm = TRUE))
stats.df
View(output_opt)
.resolutions
res
rep(res)
help(rep)
length(.bootstraps)
source("~/Desktop/NEPC_PatientsCodes/ClusteringOptimization_NEPCPatients.R", echo=TRUE)
getwd()
setwd("../silhClust/")
build()
install()
detach("package:silhClust",unload=TRUE)
source("~/Desktop/NEPC_PatientsCodes/ClusteringOptimization_NEPCPatients.R", echo=TRUE)
View(output_opt)
res
rep(res,each=2)
n_bootstraps
setwd("../silhClust")
getwd()
build()
install()
debug(GridSearch2)
library(silhClust)
debug(GridSearch2)
source("~/Desktop/NEPC_PatientsCodes/ClusteringOptimization_NEPCPatients.R", echo=TRUE)
resolution = rep(.resolutions, length(.bootstraps))
resolution
open(GridSearch2)
GridSearch2
getwd()
detach("package:silhClust",unload=TRUE)
library(devtools)
devtools::document()
devtools:document()
devtools::document()
getwd()
cd("../silhClust")
getwd("../silhClust")
setwd("../silhClust")
getwd()
detach("package:silhClust",unload=TRUE)
library(devtools)
devtools::document()
build()
install()
library(silhClust)
GridSearch2()
GridSearch2
rm(list=ls())
