% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getFinal.R
\name{getFinal}
\alias{getFinal}
\title{Single Cell cluster determination using (S)NN modularity optimization algorithm. Useful to retrieve the exactly the same
solution calculated using SAClustering, without running again the whole optimization routine.}
\usage{
getFinal(
  S.obj,
  res = 0.5,
  NN = 15,
  assay = "RNA",
  slot = "scale.data",
  reduction = TRUE,
  reduction.slot = "pca",
  num.pcs = NULL,
  verbose = FALSE,
  clust.alg = 1,
  type.fun = "mean.silhouette",
  weights = "unitary",
  exp_base = 2.7182,
  rng.seed = 0,
  object.dist = NULL
)
}
\arguments{
\item{S.obj}{A Seurat object}

\item{res}{value for resolution (numeric). Default is `0.5`.}

\item{NN}{number of nearest neighbors (numeric). Default is `15`.}

\item{assay}{assay to use in construction of (S)NN. Default is `"RNA"`; used only when `reduction` is `FALSE`}

\item{slot}{slot to use in construction of (S)NN. Default is `scale.data`; used only when `reduction` is `FALSE`}

\item{reduction}{Logical. Whether to perform clustering using principal components (`TRUE`) or
original variables in the provided `slot` of the Seurat object `assay` (`FALSE`). Setting `reduction` = `TRUE` requires
a `DimReduc` object of name `"pca"` to be present in `S.obj`.}

\item{reduction.slot}{reduction slot to use if `reduction` is set to `TRUE`, ignored otherwise. Default is `"pca"`}

\item{num.pcs}{number of principal components to use for the construction of the (S)NN (numeric). Used only if `reduction = TRUE`. Default is `NULL`,
meaning that all principal components in the dimensionality reduction slot are employed in (S)NN construction.}

\item{verbose}{whether to print the outcomes of `FindNeighbors` and `FindClusters` at each function call. Default is `FALSE`.}

\item{clust.alg}{Algorithm for modularity optimization (input to `Seurat::FindClusters`). `1` = Louvain (default); `2` = Louvain
with multilevel refinement; `3` = SLM; `4` = Leiden (requires the leidenalg python). See `Seurat::FindClusters()`
for further details.}

\item{type.fun}{Metric to evaluate the quality of the clustering solution. Options include: `"mean.silhouette"` = mean
silhouette computed over all cells in the dataset (default); `"median.silhouette"` = median silhouette computed over all cells in
the dataset. `"group.mean.silhouette"` = mean of the per-group average silhouettes. `"group.median.silhouette"` = mean of the
per-group median silhouettes. `"generalized.logistic"` = mean of the transformed-silhouette computed using a generalized logistic
transformation. See vignette for further details.}

\item{weights}{weights assigned to negative silhouette scores in the calculation of the objective function `type.fun`. Possible values are
either `"unitary"`, i.e. negative silhouette scores are used in the calculation of the objective function as they are, or `"exp"`, i.e.
negative silhouette scores are used in the calculation of the objective function after exponentiation. Default is `"unitary"`.}

\item{rng.seed}{Seed of the random number generator used in `FindClusters`.}

\item{object.dist}{A distance matrix computed across all cells used in `S.obj`. (Default is `NULL`, i.e. distance matrix is automatically computed as 
a correlation distance).}
}
\value{
Returns an object of class Seurat with the with optimal clustering solution stored in the metadata `seurat_clusters`, the
corresponding `silhouette` object stored in `Seurat_object[[assay]]@misc$sil` and the value of the metric `type.fun` for the assessment of the cluster quality
`Seurat_object[[assay]]@misc$metric`.
}
\description{
`getFinal()` returns clustering solution and the optimal score corresponding to the given input parameters,
 using a modularity optimization based clustering algorithm. `getFinal()` makes use of
`FindNeighbors()` and `FindClusters()` from the Seurat package to construct a SNN
graph and identify clusters by optimizing a modularity function. To evaluate the quality of the returned solution
`getFinal()` returns the value associated to a user-defined metric (see \code{type.fun}).
}
\details{
Continue with description of details
}
\note{
Add notes
}
\examples{



\dontrun{
# Just to retrieve example data
# devtools::install_github('satijalab/seurat-data') # if package SeuratData is needed, just for e.g.

library(SeuratData) # just to retrieve some example data
AvailableData() # to see some example data
InstallData("pbmc3k")
pbmc3k.final <- LoadData("pbmc3k",type="pbmc3k.final")

Actual example
Get clustering solution using principal components as features and add the
clustering solution to the metadata under the voice `seurat_clusters` and the
median silhouette computed across all cells as the output metric in `S.obj[["RNA"]]@misc$metric`.

S.obj <- getFinal(S.obj=pbmc3k.final,
res=1,
NN=30,
reduction=TRUE,
type.fun="median.silhouette")
}

\dontrun{
Get clustering solution on gene expression data with input parameters
The following example uses reduction = FALSE.
clustering.output <- getFinal(S.obj=pbmc3k.final,
res=0.5,
NN=15,
reduction=FALSE,
verbose=TRUE)
}




}
\seealso{
\code{\link[Seurat]{FindNeighbors}}, \code{\link[Seurat]{FindClusters}}
}
\author{
Luca Zanella
}
