% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SA_tools.R
\name{SAClustering}
\alias{SAClustering}
\title{Single Cell cluster determination by generalized simulated annealing}
\usage{
SAClustering(
  S.obj,
  res.range = c(0.01, 2),
  NN.range = c(3, 30),
  par.init = NULL,
  assay = "RNA",
  slot = "scale.data",
  reduction = TRUE,
  reduction.slot = "pca",
  optimize.pcs = FALSE,
  clust.alg = 1,
  type.fun = "mean.silhouette",
  weights = "unitary",
  exp_base = 2.718282,
  control = NULL,
  verbose = TRUE,
  diagnostics = FALSE,
  lq = 0,
  rng.seeds = c(1234, 0)
)
}
\arguments{
\item{S.obj}{A Seurat object}

\item{res.range}{A numeric vector containing the minimum and maximum values for resolution. Default is `c(0.01,2)`.}

\item{NN.range}{A numeric vector containing the minimum and maximum number of nearest neighbors to
on which optimization should be performed. Default is `c(3,30)`.}

\item{par.init}{A vector containing the initial values for the optimization parameters. First and second element
refer the the initial value of the resolution and number of nearest-neighbors, respectively. Values must be
within in the range specified by `res.range` and `NN.range`. If `optimize.pcs` is `TRUE`, a third element (integer) must be provided, as the
initialization parameter for the number of principal components. This value must be}

\item{assay}{Assay to use in construction of (S)NN. Default is `"RNA"`; used only when `reduction` is `FALSE`}

\item{slot}{Slot to use in construction of (S)NN. Default is `scale.data`; used only when `reduction` is `FALSE`}

\item{reduction}{Logical. Whether to perform silhouette-based optimized clustering using principal components (`TRUE`) or
original variables in the provided `slot` of the Seurat object `assay` (`FALSE`). Setting `reduction` = `TRUE` requires
a `DimReduc` object of name `"pca"` to be present in `S.obj`.}

\item{reduction.slot}{reduction slot to use if `reduction` is set to `TRUE`, ignored otherwise. Default is `"pca"`}

\item{optimize.pcs}{whether to optimize on the number of principal components in addition to the number of nearest neighbors and resolution.
Used only if `reduction = TRUE`. Default is `FALSE`.}

\item{clust.alg}{Algorithm for modularity optimization (input to `Seurat::FindClusters`). `1` = Louvain (default); `2` = Louvain
with multilevel refinement; `3` = SLM; `4` = Leiden (requires the leidenalg python). See `Seurat::FindClusters()`
for further details.}

\item{type.fun}{Objective function t o be optimized by Simulated Annealing. Options include: `"mean.silhouette"` = mean
silhouette computed over all cells in the dataset (default); `"median.silhouette"` = median silhouette computed over all cells in
the dataset. `"group.mean.silhouette"` = mean of the per-group average silhouettes. `"group.median.silhouette"` = mean of the
per-group median silhouettes. `"generalized.logistic"` = mean of the transformed-silhouette computed using a generalized logistic
transformation. See vignette for further details.}

\item{weights}{weights assigned to negative silhouette scores in the calculation of the objective function `type.fun`. Possible values are
either `"unitary"`, i.e. negative silhouette scores are used in the calculation of the objective function as they are, or `"exp"`, i.e.
negative silhouette scores are used in the calculation of the objective function after exponentiation. Default is `"unitary"`.}

\item{control}{List of options for Simulated Annealing. Available options are: `maxit`, `threshold.stop`, `nb.stop.improvement`,
`smooth`, `max.call`, `max.time`, `temperature`, `visiting.param`, `acceptance.param`, `verbose`,
`simple.function`, `trace.mat`, `seed`. See Gubian el al. (2018) https://cran.r-project.org/web/packages/GenSA/GenSA.pdf for the
complete description of the settings. Default is `NULL`, i.e. default settings are employed in the
optimization of `type.fun`.}

\item{verbose}{Whether to print output of each function call. Default is `TRUE`.}

\item{diagnostics}{whether to print the outcomes of `FindNeighbors` and `FindClusters` at each function call. Default is `FALSE`.}

\item{lq}{threshold for low quality cell assignment to the given cluster. Just, informative; it does not impact the calculation.}

\item{rng.seeds}{Seeds of the random number generators. The first element is used in `GenSA`, the second element is `FindClusters`.}
}
\value{
Returns an object of class Seurat with the with optimal clustering solution stored in the metadata `seurat_clusters`, the
corresponding `silhouette` object stored in `Seurat_object[[assay]]@misc$sil` and a list containing  the history of the optimization
algorithm stored in `Seurat_object[[assay]]@misc$SA.history`. The list contains the following fields:
\itemize{
\item `optim.par` parameters corresponding to the optimal clustering solution obtained by generalized simulated annealing
\item  `optim.value` optimal value of the objective function
\item `trace.mat` matrix collecting the history of the algorithm, as produced by the GenSA package.
\item `num.evaluations` number of times the objective function is evaluated
\item `par.history` matrix collecting resolution, number of nearest neighbors, number of clusters and objective
}
}
\description{
`SAClustering()` identifies clusters of cells by a shared nearest neighbor (SNN)
modularity optimization based clustering algorithm. `SAClustering()` makes use of
`FindNeighbors()` and `FindClusters()` from the Seurat package to construct a SNN
graph and identify clusters by optimizing a modularity function, respectively.
To help the user in the choice of a (close-to) optimal choice of the parameters,
number of nearest neighbors and resolution, `SAClustering()` optimizes a user-selected
objective function (see \code{type.fun}) using Simulated Annealing.
}
\details{
Continue with description of details
}
\note{
Add notes
}
\examples{
\dontrun{
# Just to retrieve example data
# devtools::install_github('satijalab/seurat-data') # if package SeuratData is needed, just for e.g.

library(SeuratData) # just to retrieve some example data
AvailableData() # to see some example data
InstallData("pbmc3k")
pbmc3k.final <- LoadData("pbmc3k",type="pbmc3k.final")

# Actual example
# Run SAClustering on gene expression data with default optimization parameters

clust.optimization <- SAClustering(S.obj=pbmc3k.final,
res.range=c(0.1,1),
NN.range=c(3,15),
reduction=FALSE,
verbose=TRUE)
}


\dontrun{
# Run SAClustering using principal components as features, allowing
# max computation time of 2 min

# Define control parameters for SAClustering (input to GenSA)
settings <- list(max.time=120) # max.time must be in s

clust.optimization <- SAClustering(S.obj=pbmc3k.final,
res.range=c(0.1,1),
NN.range=c(3,15),
reduction=TRUE,
control=settings)
}


\dontrun{
# Run SAClustering with user-defined optimization settings

# Increase temperature: computationally demanding, useful for complex problems

settings <- list(temperature=1e7)

clust.optimization <- SAClustering(S.obbj=pbmc3k.final,
res.range=c(0.1,1),
NN.range=c(3,15),
par.init=c(0.5,7),
control=settings
)
}


}
\seealso{
\code{\link[GenSA]{GenSA}}, \code{\link[Seurat]{FindNeighbors}}, \code{\link[Seurat]{FindClusters}}
}
\author{
Luca Zanella
}
