% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SA_tools.R
\name{SAClustering}
\alias{SAClustering}
\title{Single Cell cluster determination by generalized simulated annealing}
\usage{
SAClustering(
  S.obj,
  res.range = c(0.01, 2),
  NN.range = c(3, 30),
  par.init = NULL,
  assay = "RNA",
  slot = "scale.data",
  reduction = TRUE,
  reduction.slot = "pca",
  optimize.pcs = FALSE,
  clust.alg = 1,
  type.fun = "mean.silhouette",
  control = NULL,
  verbose = TRUE,
  plot = FALSE,
  diagnostics = FALSE,
  lq = 0,
  rng.seeds = c(1234, 0)
)
}
\arguments{
\item{S.obj}{A Seurat object}

\item{res.range}{A numeric vector containing the minimum and maximum values for resolution. Default is \code{c(0.01,2)}.}

\item{NN.range}{A numeric vector containing the minimum and maximum number of nearest neighbors to
on which optimization should be performed. Default is \code{c(3,30)}.}

\item{par.init}{A vector containing the initial values for the optimization parameters. First and second element
refer the the initial value of the resolution and number of nearest-neighbors, respectively. Values must be
within in the range specified by \code{res.range} and \code{NN.range}. If \code{optimize.pcs} is \code{TRUE}, a third element (integer) must be provided, as the
initialization parameter for the number of principal components. This value must be}

\item{assay}{Assay to use in construction of (S)NN. Default is \code{"RNA"}; used only when \code{reduction} is \code{FALSE}}

\item{slot}{Slot to use in construction of (S)NN. Default is \code{scale.data}; used only when \code{reduction} is \code{FALSE}}

\item{reduction}{Logical. Whether to perform silhouette-based optimized clustering using principal components (\code{TRUE}) or
original variables in the provided \code{slot} of the Seurat object \code{assay} (\code{FALSE}). Setting \code{reduction} = \code{TRUE} requires
a \code{DimReduc} object of name \code{"pca"} to be present in \code{S.obj}.}

\item{reduction.slot}{reduction slot to use if \code{reduction} is set to \code{TRUE}, ignored otherwise. Default is \code{"pca"}}

\item{optimize.pcs}{whether to optimize on the number of principal components in addition to the number of nearest neighbors and resolution.
Used only if \code{reduction = TRUE}. Default is \code{FALSE}.}

\item{clust.alg}{Algorithm for modularity optimization (input to \code{Seurat::FindClusters}). \code{1} = Louvain (default); \code{2} = Louvain
with multilevel refinement; \code{3} = SLM; \code{4} = Leiden (requires the leidenalg python). See \code{Seurat::FindClusters()}
for further details.}

\item{type.fun}{Objective function to be optimized by Simulated Annealing. Options include: \code{"mean.silhouette"} = mean
silhouette computed over all cells in the dataset (default); \code{"median.silhouette"} = median silhouette computed over all cells in
the dataset. \code{"group.mean.silhouette"} = mean of the per-group average silhouettes. \code{"group.median.silhouette"} = mean of the
per-group median silhouettes.}

\item{control}{List of options for Simulated Annealing. Available options are: \code{maxit}, \code{threshold.stop}, \code{nb.stop.improvement},
\code{smooth}, \code{max.call}, \code{max.time}, \code{temperature}, \code{visiting.param}, \code{acceptance.param}, \code{verbose},
\code{simple.function}, \code{trace.mat}, \code{seed}. See Gubian el al. (2018) https://cran.r-project.org/web/packages/GenSA/GenSA.pdf for the
complete description of the settings. Default is \code{NULL}, i.e. default settings are employed in the
optimization of \code{type.fun}.}

\item{verbose}{Whether to print output of each function call. Default is \code{TRUE}.}

\item{plot}{Whether to plot outcomes from clustering.}

\item{diagnostics}{whether to print the outcomes of \code{FindNeighbors} and \code{FindClusters} at each function call. Default is \code{FALSE}.}

\item{rng.seeds}{Seeds of the random number generators. The first element is used in \code{GenSA}, the second element is \code{FindClusters}.}

\item{final}{Whether \code{SAClustering()} should include a Seurat object with optimal clustering
results stored under \code{seurat_clusters} (thus overwritting pre-existent ones).}

\item{lg}{threshold for low quality cell assignment to the given cluster. Just, informative; it does not impact the calculation.}
}
\value{
Returns an object of class Seurat with the with optimal clustering solution stored in the metadata \code{seurat_clusters}, the
corresponding \code{silhouette} object stored in \code{Seurat_object[[assay]]@misc$sil} and a list containing  the history of the optimization
algorithm stored in \code{Seurat_object[[assay]]@misc$SA.history}. The list contains the following fields:
\itemize{
\item \code{optim.par} parameters corresponding to the optimal clustering solution obtained by generalized simulated annealing
\item  \code{optim.value} optimal value of the objective function
\item \code{trace.mat} matrix collecting the history of the algorithm, as produced by the GenSA package.
\item \code{num.evaluations} number of times the objective function is evaluated
\item \code{par.history} matrix collecting resolution, number of nearest neighbors, number of clusters and objective
}
}
\description{
\code{SAClustering()} identifies clusters of cells by a shared nearest neighbor (SNN)
modularity optimization based clustering algorithm. \code{SAClustering()} makes use of
\code{FindNeighbors()} and \code{FindClusters()} from the Seurat package to construct a SNN
graph and identify clusters by optimizing a modularity function, respectively.
To help the user in the choice of a (close-to) optimal choice of the parameters,
number of nearest neighbors and resolution, \code{SAClustering()} optimizes a user-selected
objective function (see \code{type.fun}) using Simulated Annealing.
}
\details{
Continue with description of details
}
\note{
Add notes
}
\examples{
\dontrun{
# Just to retrieve example data
# devtools::install_github('satijalab/seurat-data') # if package SeuratData is needed, just for e.g.

library(SeuratData) # just to retrieve some example data
AvailableData() # to see some example data
InstallData("pbmc3k")
pbmc3k.final <- LoadData("pbmc3k",type="pbmc3k.final")

# Actual example
# Run SAClustering on gene expression data with default optimization parameters

clust.optimization <- SAClustering(S.obj=pbmc3k.final,
res.range=c(0.1,1),
NN.range=c(3,15),
reduction=FALSE,
verbose=TRUE,
plot=TRUE)
}


\dontrun{
# Run SAClustering using principal components as features, allowing
# max computation time of 2 min

# Define control parameters for SAClustering (input to GenSA)
settings <- list(max.time=120) # max.time must be in s

clust.optimization <- SAClustering(S.obj=pbmc3k.final,
res.range=c(0.1,1),
NN.range=c(3,15),
reduction=TRUE,
control=settings,
plot=FALSE)
}


\dontrun{
# Run SAClustering with user-defined optimization settings

# Increase temperature: computationally demanding, useful for complex problems

settings <- list(temperature=1e7)

clust.optimization <- SAClustering(S.obbj=pbmc3k.final,
res.range=c(0.1,1),
NN.range=c(3,15),
par.init=c(0.5,7),
control=settings
)
}


}
\seealso{
\code{\link[GenSA]{GenSA}}, \code{\link[Seurat]{FindNeighbors}}, \code{\link[Seurat]{FindClusters}}
}
\author{
Luca Zanella
}
