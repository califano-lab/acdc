% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GridSearch_pcs_fast.R
\name{GridSearch_pcs_fast}
\alias{GridSearch_pcs_fast}
\title{GridSearch_pcs_fast
Computes the optimal combination of k and resolution for
clustering, by grid-search optimization of the Silhouette score across multiple
resamplings. Runs faster by computing the distance matrix once if not bootstrapping
and placing NN in the outer loop and resolution in the inner loop, reducing the number
of times that neighbors are computed.}
\usage{
GridSearch_pcs_fast(
  object,
  assay.name,
  .resolutions = seq(0.01, 2, by = 0.01),
  .bootstraps = 1,
  .knns = seq(3, 31, by = 2),
  .pct_cells = 100,
  .replace = FALSE,
  .clust_alg = "Louvain",
  free.cores = 2,
  .type = "genes",
  .dims = NULL,
  my_seed = 0,
  weights = "unitary",
  exp_base = 2.718282,
  show_progress_bar = TRUE
)
}
\arguments{
\item{object}{Seurat object (genes/proteins along rows and cells on columns)}

\item{assay.name}{Assay to use}

\item{.resolutions}{vector of the resolution parameter. Default=seq(0.01,2,by = 0.01).}

\item{.bootstraps}{vector of bootstraps. Default=1 (i.e. no bootstraps).}

\item{.knns}{sequence of values for the number of nearest neighbors. Default=seq(3, 31, by=2).}

\item{.pct_cells}{percentage of cells sample at each bootstrap iteration. Default is 100% (all cells are used).}

\item{.clust_alg}{clustering algorithm. Choose among: "Louvain" (default); "Louvain-mult-ref"; "SLM"; "Leiden".}

\item{my_seed}{random seed for FindClusters. Default=0.}

\item{weights}{unitary (unitary) or exponential (exp) way of weighing the silhouette scores. Default=unitary.}

\item{.replace:}{(logical) whether to sample cells with (TRUE) or without replacement (FALSE). Default=FALSE.}

\item{free_cores}{number of cores that are not used for the calculation. Default=2.}
}
\value{
A 11-columns tibble containing the outcomes of the calculation for choosing the optimal number of clusters. \cr

Columns consist of the following vectors.
\code{index}: integer in the interval 1-\emph{n_idx}, where \emph{n_idx}=\code{length(.bootstrap)*}\code{length(.knns)}
uniquely assigned to each combination of \code{.bootstraps} and \code{.knns}. \cr
\code{boostrap}: integer assigned to the given resampling. Possible values are those in \code{.bootstraps}. \cr
\code{knn}: number of nearest neighbors used as input parameters to FindNeighbors. Possible values are those in \code{.knns}. \cr
\code{resolution}: resolution for FindClusters. Possible values are those in \code{.resolutions}. \cr
\code{tot_sil_neg}: \cr
\code{lowest_sil_clust}: \cr
\code{sil_avg}: \cr
\code{sil_mean_median}: \cr
\code{n_clust}: number of clusters resulting for the given combination of \code{knn}, \code{resolution} with cells sampled according to \code{bootstrap}. \cr
\code{random.seed}: random seed used to initialize the rng for cell subsamplings. Values are the same as \code{index}.
}
\description{
GridSearch_pcs_fast
Computes the optimal combination of k and resolution for
clustering, by grid-search optimization of the Silhouette score across multiple
resamplings. Runs faster by computing the distance matrix once if not bootstrapping
and placing NN in the outer loop and resolution in the inner loop, reducing the number
of times that neighbors are computed.
}
