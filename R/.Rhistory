getwd()
setwd("..")
devtools::document()
devtools::build()
devtools::install()
library(silhClust)
help(silhClust2)
help(GridSearch2)
GridSearch2
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
getwd()
setwd("../NEPC_PatientsCodes/")
######
library(dplyr)
library(ggplot2)
library(Seurat)
library(SeuratObject)
library(reticulate)
library(anndata) #reticulate::install_miniconda(); anndata::install_anndata()
library(Matrix)
library(patchwork)
library(SparseM)
library(spam)
library(tidyverse)
library(RCurl)
library(cowplot)
library(purrr)
library(celldex) # databases of cell labels
library(PISCES)
library(SingleR)
library(scuttle)
library(scater)
library(infercnv)
library(silhClust)
library(doParallel)
setwd(paste0("/Users/",Sys.info()[["user"]],"/Desktop/NEPC_PatientsCodes"))
ObjFold <- paste0("../NEPCPatients/SeuratObjects/dimReduc/")
files <- list.files(ObjFold)
print("parameters for testing, then set actual parameters")
res <- seq(0.01,1,by = 0.5) # resolutions for Louvain algorithm
n_bootstraps <- c(1,2) # number of resamplings
kNNs <- seq(3,7,by=2)
pct <- 80 # % cells to resample
print("Add all patients")
k = files[1]
name <- paste0("P",p_num)
p_num <- 1
name <- paste0("P",p_num)
S.obj <- readRDS(file=paste0(ObjFold,"/",k))
assign(name,S.obj)
P1
15809*2
P1
P1[["reduction"]]
P1[["assay.name"]]
P1[["pca"]]
help("FindNeighbors")
devtools::document()
getwd()
setwd("../silhClust")
devtools::document()
devtools::document()
devtools::build()
devtools::install()
rm(list=ls()) # cleans workspace
#.rs.restartR() # restart memory to free RAM
gc()
cat("\014")
######
library(dplyr)
library(ggplot2)
library(Seurat)
library(SeuratObject)
library(reticulate)
library(anndata) #reticulate::install_miniconda(); anndata::install_anndata()
library(Matrix)
library(patchwork)
library(SparseM)
library(spam)
library(tidyverse)
library(RCurl)
library(cowplot)
library(purrr)
library(celldex) # databases of cell labels
library(PISCES)
library(SingleR)
library(scuttle)
library(scater)
library(infercnv)
library(silhClust)
library(doParallel)
setwd(paste0("/Users/",Sys.info()[["user"]],"/Desktop/NEPC_PatientsCodes"))
ObjFold <- paste0("../NEPCPatients/SeuratObjects/dimReduc/")
files <- list.files(ObjFold)
print("parameters for testing, then set actual parameters")
res <- seq(0.01,1,by = 0.5) # resolutions for Louvain algorithm
n_bootstraps <- c(1,2) # number of resamplings
kNNs <- seq(3,7,by=2)
pct <- 80 # % cells to resample
print("Add all patients")
p_num <- 1
for (k in files[1]){
name <- paste0("P",p_num)
S.obj <- readRDS(file=paste0(ObjFold,"/",k))
assign(name,S.obj)
output_opt <- GridSearch_pcs(object=get(name),
assay.name='SCT',
.resolutions=res,
.bootstraps=n_bootstraps,
.knns=kNNs,
.pct_cells=pct,
.replace=FALSE,
.clust_alg="Louvain")
stats.df <- tibble( .rows=length(unique(output_opt$index)) )
stats.df <- output_opt %>% group_by(knn,resolution) %>% summarise(across(sil_avg, list(avg=mean,sd=sd), na.rm = TRUE))
# evaluation
print("To be fixed")
ggplot(output_opt, aes(x=as.factor(index), y=sil_avg )) +
geom_boxplot()  +
theme_classic()
opts <- stats.df[order(-stats.df$sil_avg_avg),][1,] # opt solution for clustering
write.table(stats.df,"../NEPCPatients/stats_df.xlsx")
rm(S.obj)
gc()
gc()
p_num <- p_num+1
}
output_opts
output_opt
getwd()
setwd("../silhClust")
devtools::document()
devtools::build()
devtools::install()
library(silhClust)
detach("package:silhClust",unload=TRUE)
library(silhClust)
source("~/Desktop/NEPC_PatientsCodes/ClusteringOptimization_NEPCPatients.R", echo=TRUE)
P1
P1[["PCA
"]]
P1[["PCA"]]
P1@reductions
P1@reductions$pca
output_opt <- GridSearch_pcs(object=get(name),
assay.name='SCT',
.resolutions=res,
.bootstraps=n_bootstraps,
.knns=kNNs,
.pct_cells=pct,
.replace=FALSE,
.dims=1:20,
.clust_alg="Louvain")
P1@reductions
P1@reductions$pca
P1@reductions$pca@cell.embeddings
dim(P1@reductions$pca@cell.embeddings)
dim(P1[["SCT"]])
dim(P1[["SCT"]]@scale.data)
