View(NetScores_test)
NS_name
source("C:/Users/zaneluc15010/Desktop/hcmi-analysis/NetworkMatch/NetworkMatch-figures-all-hcmi-pleiotropy.R", echo=TRUE)
source("C:/Users/zaneluc15010/Desktop/hcmi-analysis/NetworkMatch/NetworkMatch-figures-all-hcmi-pleiotropy.R", echo=TRUE)
source("C:/Users/zaneluc15010/Desktop/hcmi-analysis/NetworkMatch/NetworkMatch-figures-all-hcmi-pleiotropy.R", echo=TRUE)
source("C:/Users/zaneluc15010/Desktop/hcmi-analysis/NetworkMatch/NetworkMatch-figures-all-hcmi-pleiotropy.R", echo=TRUE)
source("C:/Users/zaneluc15010/Desktop/hcmi-analysis/NetworkMatch/NetworkMatch-figures-all-hcmi-pleiotropy.R", echo=TRUE)
source("C:/Users/zaneluc15010/Desktop/hcmi-analysis/NetworkMatch/NetworkMatch-figures-all-hcmi-pleiotropy.R", echo=TRUE)
source("C:/Users/zaneluc15010/Desktop/hcmi-analysis/NetworkMatch/NetworkMatch-figures-all-hcmi-pleiotropy.R", echo=TRUE)
source("C:/Users/zaneluc15010/Desktop/hcmi-analysis/NetworkMatch/NetworkMatch-figures-all-hcmi-pleiotropy.R", echo=TRUE)
source("C:/Users/zaneluc15010/Desktop/hcmi-analysis/NetworkMatch/NetworkMatch-figures-all-hcmi-pleiotropy.R", echo=TRUE)
source("C:/Users/zaneluc15010/Desktop/hcmi-analysis/NetworkMatch/NetworkMatch-figures-all-hcmi-pleiotropy.R", echo=TRUE)
view(AUC_abs_all_M)
view(AUC_abs_all_M[,colnames("HCM-BROD-0417-C71-85A")])
view(AUC_abs_all_M[,colnames(AUC_abs_all_M)=="HCM-BROD-0417-C71-85A"])
rm(list = ls()) # cleans workspace
gc()
cat("\014")
# Set paths
cat("YOU MUST SET DataFolder and HCMIAnalysis (i.e. the hcmi-analysis directory) according to your paths.\n")
DataFolder <- "M:/shares/hcmi/" #"/Volumes/ac_lab_scratch/hn2345/hcmi"  # "/ifs/scratch/c2b2/ac_lab/shares/hcmi"
HCMIAnalysis <- paste0("/Users/",Sys.info()[["user"]],"/Desktop/hcmi-analysis/") #"/Users/lz2841/Desktop/hcmi-analysis/" #paste0("/Users/",Sys.info()[["user"]],"/Desktop/hcmi-analysis/")
# User defined settings
{
Dataset <- "hcmi" # "hcmi" "tcga"
alpha <- 1e-10 # statistical significance
Pipeline <- "aracne3-mi00-size50_narnea"  # 4 possible values:
# "aracne3-mi00-size50_area"
# "aracne3-mi00-size50_narnea"
# "aracneAP-size50_area"
# "aracneAP-size50_narnea"
Tissues <- c("Breast", "Brain", "Lung", "Colon", "Rectum", "Unknown", "Ovary", "Pancreas", "Skin")
Networks <- c("HCMI-BRCA", "TCGA-GBM", "TCGA-LGG", "TCGA-LUSC", "TCGA-LUAD", "TCGA-COAD", "TCGA-READ", "TCGA-OV","TCGA-PAAD", "TCGA-SKCM")
cat("Analysis for the ", Dataset, "dataset. Set 'Dataset' to 'hcmi' or 'tcga' to analyse HCMI and TCGA data.\n" )
cat("You are using protein activities computed with Pipeline: ",Pipeline,
". Set 'Pipeline' to another value to change it.\n")
cat("P value threshold: ", alpha, "Change 'alpha' for different threshold.\n" )
cat("This analysis encompasses the following ", Dataset, " tissues: ",Tissues,"\n")
Fig.pars <- list("width"=10, "height"=12, "res"=1200)
cat("Fig.pars set to: ", Fig.pars$width, "(width), ",
Fig.pars$height, "(height), ",
Fig.pars$res, "(resolution).",
"\nChange Fig.pars to set different values.\n"
)
thresh_type = "estimate"  # "fixed" (D) or "estimate"
fixed_thresh = 1 # threshold on correlation to determine whether the regulator is correlated or not
quantile_prob = 0.5 # to compute threshold on correlation corresponding to this quantile
}
# Libraries and dependencies
{
suppressWarnings(suppressMessages(library(dplyr)))
suppressWarnings(suppressMessages(library(ggplot2)))
suppressWarnings(suppressMessages(library(purrr)))
suppressWarnings(suppressMessages(library(tibble)))
suppressWarnings(suppressMessages(library(metap)))
suppressWarnings(suppressMessages(library(reshape)))
suppressWarnings(suppressMessages(library(ComplexHeatmap)))
suppressWarnings(suppressMessages(library(viridis)))
suppressWarnings(suppressMessages(library(stringr)))
source(file.path(HCMIAnalysis,"funcs","utils.R"))
}
# A) Loading and preprocessing hcmi sample metadata
{
# Loading
RNA_Seq_metadata <- readRDS( file.path(DataFolder, "edata","hcmi", "meta_hcmi_curated_v3.rds") )
RNA_Seq_metadata$tissue_or_organ_of_origin <- sub(", NOS", "",RNA_Seq_metadata$tissue_or_organ_of_origin)
RNA_Seq_metadata$tissue_or_organ_of_origin[is.na(RNA_Seq_metadata$tissue_or_organ_of_origin)] <- "Unknown"
RNA_Seq_metadata$tissue_or_organ_of_origin <- as.factor( RNA_Seq_metadata$tissue_or_organ_of_origin )
print_msg_info("Filtering out '--, 'Not Reported' and 'Pleural Effusion' in composition..\n")
RNA_Seq_metadata <- RNA_Seq_metadata %>% dplyr::filter(., composition != "'--") %>%
dplyr::filter(., composition != "Not Reported") %>%
dplyr::filter(., composition != "Pleural Effusion")
# simplify metadata annotation
RNA_Seq_metadata$tumor_model_cellLine <- as.character(RNA_Seq_metadata$composition)
# tumor
RNA_Seq_metadata$tumor_model_cellLine[RNA_Seq_metadata$tumor_model_cellLine == "Solid Tissue"] <- "tumor"
RNA_Seq_metadata$tumor_model_cellLine[RNA_Seq_metadata$tumor_model_cellLine == "Cell"] <- "tumor"
RNA_Seq_metadata$tumor_model_cellLine[RNA_Seq_metadata$tumor_model_cellLine == "Human Original Cells"] <- "tumor"
# model
RNA_Seq_metadata$tumor_model_cellLine[RNA_Seq_metadata$tumor_model_cellLine == "3D Neurosphere"] <- "model"
RNA_Seq_metadata$tumor_model_cellLine[RNA_Seq_metadata$tumor_model_cellLine == "3D Organoid"] <- "model"
# cell line
RNA_Seq_metadata$tumor_model_cellLine[RNA_Seq_metadata$tumor_model_cellLine == "2D Modified Conditionally Reprogrammed Cells"] <- "cell_line"
RNA_Seq_metadata$tumor_model_cellLine[RNA_Seq_metadata$tumor_model_cellLine == "Adherent Cell Line"] <- "cell_line"
RNA_Seq_metadata$tumor_model_cellLine[RNA_Seq_metadata$tumor_model_cellLine == "Mixed Adherent Suspension"] <- "cell_line"
print_msg_info("Splitting metadata information into tumor, model, cell lines dataframes..")
RNA_Seq_metadata_T <- RNA_Seq_metadata %>% dplyr::filter(., tumor_model_cellLine == "tumor" )
RNA_Seq_metadata_M <- RNA_Seq_metadata %>% dplyr::filter(., tumor_model_cellLine == "model" )
RNA_Seq_metadata_C <- RNA_Seq_metadata %>% dplyr::filter(., tumor_model_cellLine == "cell_line" )
}
NS_name <- switch(thresh_type,
"fixed"={
NS_name_construction <- paste0("NetworkScores_",Dataset,"_",Pipeline,"_net_alpha",alpha,"_fixedThresh_",sub("\\.","_",fixed_thresh),"_pleiotropy.rds")
},
"estimate"={
NS_name_construction <- paste0("NetworkScores_",Dataset,"_",Pipeline,"_net_alpha",alpha,"_estimatedThresh_quantile_",sub("\\.","_",quantile_prob),"_pleiotropy.rds")
})
NetworkScores <- readRDS( file.path( DataFolder, "NetworkMatch", "NetworkScores", "PleiotropyCorrection", NS_name ) )
NetworkScores %>% View()
rm(list = ls()) # cleans workspace
gc()
cat("\014")
# Set paths
cat("YOU MUST SET DataFolder and HCMIAnalysis (i.e. the hcmi-analysis directory) according to your paths.\n")
DataFolder <- "M:/shares/hcmi/" #"/Volumes/ac_lab_scratch/hn2345/hcmi"  # "/ifs/scratch/c2b2/ac_lab/shares/hcmi"
HCMIAnalysis <- paste0("/Users/",Sys.info()[["user"]],"/Desktop/hcmi-analysis/") #"/Users/lz2841/Desktop/hcmi-analysis/" #paste0("/Users/",Sys.info()[["user"]],"/Desktop/hcmi-analysis/")
# User defined settings
{
Dataset <- "hcmi" # "hcmi" "tcga"
alpha <- 1e-10 # statistical significance
Pipeline <- "aracne3-mi00-size50_narnea"  # 4 possible values:
# "aracne3-mi00-size50_area"
# "aracne3-mi00-size50_narnea"
# "aracneAP-size50_area"
# "aracneAP-size50_narnea"
Tissues <- c("Breast", "Brain", "Lung", "Colon", "Rectum", "Unknown", "Ovary", "Pancreas", "Skin")
Networks <- c("HCMI-BRCA", "TCGA-GBM", "TCGA-LGG", "TCGA-LUSC", "TCGA-LUAD", "TCGA-COAD", "TCGA-READ", "TCGA-OV","TCGA-PAAD", "TCGA-SKCM")
cat("Analysis for the ", Dataset, "dataset. Set 'Dataset' to 'hcmi' or 'tcga' to analyse HCMI and TCGA data.\n" )
cat("You are using protein activities computed with Pipeline: ",Pipeline,
". Set 'Pipeline' to another value to change it.\n")
cat("P value threshold: ", alpha, "Change 'alpha' for different threshold.\n" )
cat("This analysis encompasses the following ", Dataset, " tissues: ",Tissues,"\n")
Fig.pars <- list("width"=10, "height"=12, "res"=1200)
cat("Fig.pars set to: ", Fig.pars$width, "(width), ",
Fig.pars$height, "(height), ",
Fig.pars$res, "(resolution).",
"\nChange Fig.pars to set different values.\n"
)
thresh_type = "fixed"  # "fixed" (D) or "estimate"
fixed_thresh = 1 # threshold on correlation to determine whether the regulator is correlated or not
quantile_prob = 0.5 # to compute threshold on correlation corresponding to this quantile
}
# Libraries and dependencies
{
suppressWarnings(suppressMessages(library(dplyr)))
suppressWarnings(suppressMessages(library(ggplot2)))
suppressWarnings(suppressMessages(library(purrr)))
suppressWarnings(suppressMessages(library(tibble)))
suppressWarnings(suppressMessages(library(metap)))
suppressWarnings(suppressMessages(library(reshape)))
suppressWarnings(suppressMessages(library(ComplexHeatmap)))
suppressWarnings(suppressMessages(library(viridis)))
suppressWarnings(suppressMessages(library(stringr)))
source(file.path(HCMIAnalysis,"funcs","utils.R"))
}
# A) Loading and preprocessing hcmi sample metadata
{
# Loading
RNA_Seq_metadata <- readRDS( file.path(DataFolder, "edata","hcmi", "meta_hcmi_curated_v3.rds") )
RNA_Seq_metadata$tissue_or_organ_of_origin <- sub(", NOS", "",RNA_Seq_metadata$tissue_or_organ_of_origin)
RNA_Seq_metadata$tissue_or_organ_of_origin[is.na(RNA_Seq_metadata$tissue_or_organ_of_origin)] <- "Unknown"
RNA_Seq_metadata$tissue_or_organ_of_origin <- as.factor( RNA_Seq_metadata$tissue_or_organ_of_origin )
print_msg_info("Filtering out '--, 'Not Reported' and 'Pleural Effusion' in composition..\n")
RNA_Seq_metadata <- RNA_Seq_metadata %>% dplyr::filter(., composition != "'--") %>%
dplyr::filter(., composition != "Not Reported") %>%
dplyr::filter(., composition != "Pleural Effusion")
# simplify metadata annotation
RNA_Seq_metadata$tumor_model_cellLine <- as.character(RNA_Seq_metadata$composition)
# tumor
RNA_Seq_metadata$tumor_model_cellLine[RNA_Seq_metadata$tumor_model_cellLine == "Solid Tissue"] <- "tumor"
RNA_Seq_metadata$tumor_model_cellLine[RNA_Seq_metadata$tumor_model_cellLine == "Cell"] <- "tumor"
RNA_Seq_metadata$tumor_model_cellLine[RNA_Seq_metadata$tumor_model_cellLine == "Human Original Cells"] <- "tumor"
# model
RNA_Seq_metadata$tumor_model_cellLine[RNA_Seq_metadata$tumor_model_cellLine == "3D Neurosphere"] <- "model"
RNA_Seq_metadata$tumor_model_cellLine[RNA_Seq_metadata$tumor_model_cellLine == "3D Organoid"] <- "model"
# cell line
RNA_Seq_metadata$tumor_model_cellLine[RNA_Seq_metadata$tumor_model_cellLine == "2D Modified Conditionally Reprogrammed Cells"] <- "cell_line"
RNA_Seq_metadata$tumor_model_cellLine[RNA_Seq_metadata$tumor_model_cellLine == "Adherent Cell Line"] <- "cell_line"
RNA_Seq_metadata$tumor_model_cellLine[RNA_Seq_metadata$tumor_model_cellLine == "Mixed Adherent Suspension"] <- "cell_line"
print_msg_info("Splitting metadata information into tumor, model, cell lines dataframes..")
RNA_Seq_metadata_T <- RNA_Seq_metadata %>% dplyr::filter(., tumor_model_cellLine == "tumor" )
RNA_Seq_metadata_M <- RNA_Seq_metadata %>% dplyr::filter(., tumor_model_cellLine == "model" )
RNA_Seq_metadata_C <- RNA_Seq_metadata %>% dplyr::filter(., tumor_model_cellLine == "cell_line" )
}
NS_name <- switch(thresh_type,
"fixed"={
NS_name_construction <- paste0("NetworkScores_",Dataset,"_",Pipeline,"_net_alpha",alpha,"_fixedThresh_",sub("\\.","_",fixed_thresh),"_pleiotropy.rds")
},
"estimate"={
NS_name_construction <- paste0("NetworkScores_",Dataset,"_",Pipeline,"_net_alpha",alpha,"_estimatedThresh_quantile_",sub("\\.","_",quantile_prob),"_pleiotropy.rds")
})
NetworkScores <- readRDS( file.path( DataFolder, "NetworkMatch", "NetworkScores", "PleiotropyCorrection", NS_name ) )
View(NetworkScores)
source("C:/Users/zaneluc15010/Desktop/hcmi-analysis/NetworkMatch/NetworkMatch-figures-all-hcmi-pleiotropy.R", echo=TRUE)
source("C:/Users/zaneluc15010/Desktop/hcmi-analysis/NetworkMatch/NetworkMatch-figures-all-hcmi-pleiotropy.R", echo=TRUE)
source("C:/Users/zaneluc15010/Desktop/hcmi-analysis/NetworkMatch/NetworkScores-calculation-pleiotropy-correction.R", echo=TRUE)
source("C:/Users/zaneluc15010/Desktop/hcmi-analysis/NetworkMatch/NetworkMatch-figures-all-hcmi-pleiotropy.R", echo=TRUE)
View(NetworkScores)
source("C:/Users/zaneluc15010/Desktop/hcmi-analysis/NetworkMatch/NetworkMatch-figures-all-hcmi-pleiotropy.R", echo=TRUE)
source("C:/Users/zaneluc15010/Desktop/hcmi-analysis/NetworkMatch/NetworkMatch-figures-all-hcmi-pleiotropy.R", echo=TRUE)
x.temp = perc_ranked_M
x.temp[x.temp==1]=100
x.temp[x.temp==2]=50
oi = lapply(levels(split_tissue_M),function(ti){
ox=which(split_tissue_M==ti)
j = hclust(dist(t(x.temp[,split_tissue_M==ti])), method="average")$order
ox = ox[j]
return(ox)})
oi.M = unlist(oi)
hm_perc_ranked_M <- Heatmap(perc_ranked_M[,oi.M],
col = circlize::colorRamp2(c(4,3,2,1),c("white","#FFEF00","orange","brown3")),
# color = sapply(AUC_ranked, get_color),
use_raster = FALSE,
cluster_columns = FALSE,
cluster_rows = FALSE,
column_dend_height = unit(5, "mm"),
#column_split = annot_cols.df$tissue_or_organ_of_origin,
column_split = split_tissue_T[oi.M],
cluster_column_slices = FALSE,
column_title_rot = 45,
column_title_side = "bottom",
column_title_gp = grid::gpar(fontsize=14),
show_column_names = FALSE,
#row_names_gp = gpar(fontsize=12),
column_gap = unit(0,"mm"), border=TRUE,
#column_dend_side="bottom",
#heatmap_legend_param = list(
# legend_direction = "horizontal",
#legend_position = "centered",
# title_position = "topcenter",
heatmap_width = unit(0.5, "mm")*ncol(perc_ranked_M),
heatmap_height = unit(1, "cm")*nrow(perc_ranked_M),
show_heatmap_legend = FALSE
)
annot_cols_M <- HeatmapAnnotation(df = annot_cols_T.df[oi.M,],
annotation_legend_param = list(title_position="topcenter"),
col = list(
tissue_or_organ_of_origin = tissue_color,
tumor_model_cellLine = models_color
),
border = TRUE)
perc_ranked_list_M = annot_cols_M %v% hm_perc_ranked_M
title_perc_M <- paste0("Model Samples - Network Scores\n", Pipeline_name, " networks; P val < ", alpha)
hm_perc_ranked_M <- draw(perc_ranked_list_M,
column_title=title_perc_M,
column_title_gp=grid::gpar(fontsize=20),
heatmap_legend_list = list(lg)
)
if (thresh_type == "fixed"){
file.name <- paste0(Dataset,"_MODEL_PERC_RANKED_top_tissues_",Pipeline,"_",alpha,"_fixedThresh_",sub("\\.","_",fixed_thresh),"_pleiotropy.png" )
} else if (thresh_type == "estimate"){
file.name <- paste0(Dataset,"_MODEL_PERC_RANKED_top_tissues_",Pipeline,"_",alpha,"_estimatedThresh_quantile",sub("\\.","_",quantile_prob),"_pleiotropy.png" )
}
x.temp = perc_ranked_M
x.temp[x.temp==1]=100
x.temp[x.temp==2]=50
oi = lapply(levels(split_tissue_M),function(ti){
ox=which(split_tissue_M==ti)
j = hclust(dist(t(x.temp[,split_tissue_M==ti])), method="average")$order
ox = ox[j]
return(ox)})
oi.M = unlist(oi)
hm_perc_ranked_M <- Heatmap(perc_ranked_M[,oi.M],
col = circlize::colorRamp2(c(4,3,2,1),c("white","#FFEF00","orange","brown3")),
# color = sapply(AUC_ranked, get_color),
use_raster = FALSE,
cluster_columns = FALSE,
cluster_rows = FALSE,
column_dend_height = unit(5, "mm"),
#column_split = annot_cols.df$tissue_or_organ_of_origin,
column_split = split_tissue_T[oi.M],
cluster_column_slices = FALSE,
column_title_rot = 45,
column_title_side = "bottom",
column_title_gp = grid::gpar(fontsize=14),
show_column_names = FALSE,
#row_names_gp = gpar(fontsize=12),
column_gap = unit(0,"mm"), border=TRUE,
#column_dend_side="bottom",
#heatmap_legend_param = list(
# legend_direction = "horizontal",
#legend_position = "centered",
# title_position = "topcenter",
heatmap_width = unit(0.5, "mm")*ncol(perc_ranked_M),
heatmap_height = unit(1, "cm")*nrow(perc_ranked_M),
show_heatmap_legend = FALSE
)
annot_cols_M <- HeatmapAnnotation(df = annot_cols_T.df[oi.M,],
annotation_legend_param = list(title_position="topcenter"),
col = list(
tissue_or_organ_of_origin = tissue_color,
tumor_model_cellLine = models_color
),
border = TRUE)
perc_ranked_list_M = annot_cols_M %v% hm_perc_ranked_M
title_perc_M <- paste0("Model Samples - Network Scores\n", Pipeline_name, " networks; P val < ", alpha)
hm_perc_ranked_M <- draw(perc_ranked_list_M,
column_title=title_perc_M,
column_title_gp=grid::gpar(fontsize=20),
heatmap_legend_list = list(lg)
)
if (thresh_type == "fixed"){
file.name <- paste0(Dataset,"_MODEL_PERC_RANKED_top_tissues_",Pipeline,"_",alpha,"_fixedThresh_",sub("\\.","_",fixed_thresh),"_pleiotropy.png" )
} else if (thresh_type == "estimate"){
file.name <- paste0(Dataset,"_MODEL_PERC_RANKED_top_tissues_",Pipeline,"_",alpha,"_estimatedThresh_quantile",sub("\\.","_",quantile_prob),"_pleiotropy.png" )
}
png( file.path(savingsDir,"Heatmaps", file.name), width=Fig.pars$width*1.2,
height=Fig.pars$height*1.4, units="in",
res=Fig.pars$res)
print(hm_perc_ranked_M)
dev.off()
dev.off()
source("C:/Users/zaneluc15010/Desktop/hcmi-analysis/NetworkMatch/NetworkMatch-figures-all-hcmi-pleiotropy.R", echo=TRUE)
dev.off()
rm(list = ls()) # cleans workspace
gc()
cat("\014")
# Set paths
cat("YOU MUST SET DataFolder and HCMIAnalysis (i.e. the hcmi-analysis directory) according to your paths.\n")
DataFolder <- "M:/shares/hcmi/"  # "/ifs/scratch/c2b2/ac_lab/hn2345/"
HCMIAnalysis <- paste0("/Users/",Sys.info()[["user"]],"/Desktop/hcmi-analysis/")
# User defined settings
{
Dataset <- "hcmi" # "hcmi" "tcga"
alpha <- 0.01 # statistical significance for NetworkScores
Pipeline <- "aracne3-mi00-size50_narnea" # 4 possible values:
# "aracne3-mi00-size50_area"
# "aracne3-mi00-size50_narnea"
# "aracneAP-size50_area"
# "aracneAP-size50_narnea"
thresh_type = "fixed"  # "fixed" (D) or "estimate"
fixed_thresh = 1 # threshold on correlation to determine whether the regulator is correlated or not
quantile_prob = 0.50 # to compute threshold on correlation corresponding to this quantile
cat("Analysis for the ", Dataset, "dataset. Set 'Dataset' to 'hcmi' or 'tcga' to analyse HCMI and TCGA data.\n" )
cat("You are using protein activities computed with Pipeline: ",Pipeline,
". Set 'Pipeline' to another value to change it.\n")
cat("P value threshold: ", alpha, "Change 'alpha' for different threshold.\n" )
}
# Libraries and dependencies
{
suppressWarnings(suppressMessages(library(dplyr)))
suppressWarnings(suppressMessages(library(ggplot2)))
suppressWarnings(suppressMessages(library(purrr)))
suppressWarnings(suppressMessages(library(tibble)))
source(file.path(HCMIAnalysis,"funcs","utils.R"))
}
RNA_Seq_metadata <- readRDS( file.path(DataFolder, "edata","hcmi", "meta_hcmi_curated_v3.rds") )
PAs_path <- switch(Dataset,
"hcmi" = {
PAs_path <- list.files( file.path(DataFolder, "pmat", "hcmi"), full.names=TRUE )
PAs_other_path <- list.files( file.path(DataFolder, "pmat", "hcmi_on_other_nets"), full.names=TRUE )
PAs_path <- c(PAs_path, PAs_other_path)
},
"tcga" = { PAs_path <- list.files( file.path(DataFolder, "pmat", "tcga"), full.names=TRUE ) }
)
rm(PAs_other_path) # not needed anymore
PAs_path <- switch(Pipeline,
"aracneAP-size50_area"={
PAs_path <- PAs_path[grepl("aracneAP-size50_area.rds", PAs_path)]
},
"aracneAP-size50_narnea"={
PAs_path <- PAs_path[grepl("aracneAP-size50_narnea", PAs_path)]
},
"aracne3-mi00-size50_area"={
PAs_path <- PAs_path[grepl("aracne3-mi00-size50_area", PAs_path)]
},
"aracne3-mi00-size50_narnea"={
PAs_path <- PAs_path[grepl("aracne3-mi00-size50_narnea", PAs_path)]
}
)
print_msg_info("Loading all protein activity matrices for ", Dataset,"..")
PAs <- list()
for (x in PAs_path){
cat("Loading ", basename(x),"\n")
if ( (Pipeline == "aracneAP-size50_area") || (Pipeline == "aracne3-mi00-size50_area") ){
PAs[[x]]$NES <- readRDS(x) # only NES
}
if ( (Pipeline == "aracneAP-size50_narnea") || (Pipeline == "aracne3-mi00-size50_narnea") ){
PAs[[x]] <- readRDS(x)
}
# NES -> p values
PAs[[x]]$pvals <- apply(PAs[[x]]$NES, 2, function(x){p.adjust(2*pnorm(abs(x), lower.tail=FALSE), "fdr")} )
# significant p values
PAs[[x]]$significant <- ( PAs[[x]]$pvals < alpha )
}
PAs[[k]]
View(PAs)
names(PAs) <- sub( sprintf('([^_]+_){%d}([^_]+)_.*', 2), '\\2', basename(PAs_path) ) %>%
sub("regul","",.)
gc()
gc()
PAs[["TCGA-ACC"]]$NES %>% dim()
dim(PAs)
length(PAs)
print_msg_info("Identifying proteins that are highly pleiotropic among networks using '", thresh_type,"' threshold method.." )
regulators_list <- lapply(PAs, function(x){ rownames(x$NES) })
common_regulators <- Reduce(intersect, regulators_list)
pairwise_nets <- combn(names(PAs), 2) # all pairs of networks comparisons
pairwise_names <- apply(pairwise_nets, 2, function(x){ paste(x[1], x[2], sep="-vs-") })
Corrs <- matrix( data=NA, nrow=length(common_regulators), ncol=length(pairwise_names) )
rownames(Corrs) <- common_regulators
colnames(Corrs) <- pairwise_names
# Fill in correlation matrices
for ( net_pair in colnames(Corrs) ){
nets <- strsplit(net_pair, "-vs-") %>% unlist()
tmp.1 <- PAs[[nets[1]]]$NES
tmp.2 <- PAs[[nets[2]]]$NES
for ( regulator in rownames(Corrs) ){
Corrs[regulator, net_pair] <- cor(x=tmp.1[regulator,],
y=tmp.2[regulator,],
method="spearman")
}
}
install.packages("devtools")
devtools::install_github("califano-lab/acdc")
library(acdc)
help("SAClustering")
library(SeuratData) # just to retrieve some example data
library(Seurat)
install.packages("SeuratData")
BiocManager::install("SeuratData")
devtools::install_github('satijalab/seurat-data')
library(SeuratData) # just to retrieve some example data
AvailableData() # to see some example data
InstallData("pbmc3k")
pbmc3k.final <- LoadData("pbmc3k",type="pbmc3k.final")
clust.optimization <- SAClustering(S.obj=pbmc3k.final,
res.range=c(0.1,1),
NN.range=c(3,15),
reduction=FALSE,
verbose=TRUE)
library(acdc)
help("SAClustering")
help("getFinal")
help("GridSearch_pcs_fast")
help("SAClustering")
devtools::install_github("califano-lab/acdc")
library("acdc")
help("SAClustering")
help("SAClustering")
library("acdc")
help("getFinal")
help("GridSearch_pcs_fast")
help(acdc)
acdc::getFinal()
acdc::getFinal
help("SAClustering")
devtools::install_github("califano-lab/acdc")
librar(acdc)
library(acdc)
help("SAClustering")
help(getFinal)
help(getFinal)
help(getFinal)
library(acdc)
help(getFinal)
help("SAClustering")
library(acdc)
help(getFinal)
pbmc3k.final <- LoadData("pbmc3k",type="pbmc3k.final")
library(SeuratData) # just to retrieve some example data
pbmc3k.final <- LoadData("pbmc3k",type="pbmc3k.final")
pbmc3k.final <- LoadData("pbmc3k",type="pbmc3k.final")
clustering.output <- getFinal(S.obj=pbmc3k.final,
res=0.5,
NN=15,
reduction=FALSE,
verbose=TRUE)
help("SAClustering")
settings <- list(max.time=120) # max.time must be in s
clust.optimization <- SAClustering(S.obj=pbmc3k.final,
res.range=c(0.1,1),
NN.range=c(3,15),
reduction=TRUE,
control=settings)
help(getFinal)
clustering.output <- getFinal(S.obj=pbmc3k.final,
res=0.5,
NN=15,
reduction=FALSE,
verbose=TRUE)
library(acdc)
help(getFinal)
library(SeuratData) # just to retrieve some example data
pbmc3k.final <- LoadData("pbmc3k",type="pbmc3k.final")
pbmc3k.final <- LoadData("pbmc3k",type="pbmc3k.final")
clustering.output <- getFinal(S.obj=pbmc3k.final,
res=0.5,
NN=15,
reduction=FALSE,
verbose=TRUE)
setwd("C:/Users/zaneluc15010/Desktop/acdc-beta/")
clustering.output <- getFinal(S.obj=pbmc3k.final,
res=0.5,
NN=15,
reduction=FALSE,
verbose=TRUE)
setwd("C:/Users/zaneluc15010/Desktop/acdc-beta/R/")
clustering.output <- getFinal(S.obj=pbmc3k.final,
res=0.5,
NN=15,
reduction=FALSE,
verbose=TRUE)
library(SeuratData)
clustering.output <- getFinal(S.obj=pbmc3k.final,
res=0.5,
NN=15,
reduction=FALSE,
verbose=TRUE)
help("IsMatrixEmpty")
library(Seurat)
clustering.output <- getFinal(S.obj=pbmc3k.final,
res=0.5,
NN=15,
reduction=FALSE,
verbose=TRUE)
clustering.output <- getFinal(S.obj=pbmc3k.final,
res=0.5,
NN=15,
reduction=FALSE,
verbose=TRUE)
help("SAClustering")
